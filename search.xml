<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1指令</title>
    <url>/2020/03/06/1%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 1vue的指令</span><br><span class="line">date: 2019-05-26 12:12:57</span><br><span class="line">categories: vue基础</span><br></pre></td></tr></table></figure>



<h5 id="一、-vue-的指令"><a href="#一、-vue-的指令" class="headerlink" title="一、 vue 的指令"></a>一、 vue 的指令</h5><a id="more"></a>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v-model   数据绑定</span><br><span class="line">data  返回对象用 <span class="keyword">return</span></span><br><span class="line">v-<span class="keyword">for</span>   循环   格式  v-<span class="keyword">for</span>=<span class="string">"字段名 in(of) 数组json"</span></span><br><span class="line">v-show   显示 隐藏     传递的值为布尔值  <span class="keyword">true</span>  <span class="keyword">false</span>  默认为<span class="keyword">false</span></span><br><span class="line">v-<span class="keyword">if</span>   显示与隐藏     和v-show对比的区别 就是是否删除dom节点   默认值为<span class="keyword">false</span></span><br><span class="line">v-<span class="keyword">else</span>-<span class="keyword">if</span>  必须和v-<span class="keyword">if</span>连用</span><br><span class="line">v-<span class="keyword">else</span>  必须和v-<span class="keyword">if</span>连用  不能单独使用  否则报错   模板编译错误</span><br><span class="line">v-bind  动态绑定  作用： 及时对页面的数据进行更改</span><br><span class="line">v-on 绑定事件  函数必须写在methods里面</span><br><span class="line"> @click  快捷方法</span><br><span class="line">v-text  解析文本</span><br><span class="line">v-html   解析html标签</span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span>   三种绑定方法  1、对象型  '</span>&#123;red:isred&#125;<span class="string">'  2、三目型   '</span>isred?<span class="string">"red"</span>:<span class="string">"blue"</span><span class="string">'   3、数组型  '</span>[&#123;red:<span class="string">"isred"</span>&#125;,&#123;blue:<span class="string">"isblue"</span>&#125;]<span class="string">'</span></span><br><span class="line"><span class="string">v-once  进入页面时  只渲染一次 不在进行渲染</span></span><br><span class="line"><span class="string">v-cloak  防止闪烁</span></span><br><span class="line"><span class="string">v-pre  把标签内部的元素原位输出</span></span><br></pre></td></tr></table></figure>



<h3 id="二、用法"><a href="#二、用法" class="headerlink" title="二、用法"></a>二、用法</h3><h4 id="1-v-text"><a href="#1-v-text" class="headerlink" title="1. v-text"></a>1. v-text</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-text主要用来更新textContent，可以等同于JS的text属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这两者等价：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-v-html"><a href="#2-v-html" class="headerlink" title="2. v-html"></a>2. v-html</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令。它等同于JS的innerHtml属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">这个div的内容将会替换成属性值rawHtml，直接作为HTML进行渲染。</span><br></pre></td></tr></table></figure>

<h4 id="3-v-pre"><a href="#3-v-pre" class="headerlink" title="3. v-pre"></a>3. v-pre</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">v-pre主要用来跳过这个元素和它的子元素编译过程。可以用来显示原始的Mustache标签。跳过大量没有指令的节点加快编译。</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;span v-pre&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/span&gt;  /</span><span class="regexp">/这条语句不进行编译</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">最终仅显示第二个span的内容</span></span><br></pre></td></tr></table></figure>

<h4 id="4-v-cloak"><a href="#4-v-cloak" class="headerlink" title="4. v-cloak"></a>4. v-cloak</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">这个指令是用来保持在元素上直到关联实例结束时进行编译。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">'hello world'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">在页面加载时会闪烁，先显示:</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">然后才会编译为：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-v-once"><a href="#5-v-once" class="headerlink" title="5. v-once"></a>5. v-once</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-once关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  //单个元素</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>//有子元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once:comment</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span>  //组件</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in list"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">上面的例子中，msg,list即使产生改变，也不会重新渲染。</span><br></pre></td></tr></table></figure>

<h4 id="6-v-if"><a href="#6-v-if" class="headerlink" title="6. v-if"></a>6. v-if</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">如果属性值ok为true，则显示。否则，不会渲染这个元素。</span><br></pre></td></tr></table></figure>

<h4 id="7-v-else"><a href="#7-v-else" class="headerlink" title="7. v-else"></a>7. v-else</h4><!--more-->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面，否则不起作用。</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-v-else-if"><a href="#8-v-else-if" class="headerlink" title="8. v-else-if"></a>8. v-else-if</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-else-if充当v-if的else-if块，可以链式的使用多次。可以更加方便的实现switch语句。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span></span><br><span class="line">    A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='B'"</span>&gt;</span></span><br><span class="line">    B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='C'"</span>&gt;</span></span><br><span class="line">    C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Not A,B,C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-v-show"><a href="#9-v-show" class="headerlink" title="9. v-show"></a>9. v-show</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-<span class="keyword">show</span>=<span class="string">"ok"</span>&gt;hello world&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">也是用于根据条件展示元素。和v-<span class="keyword">if</span>不同的是，如果v-<span class="keyword">if</span>的值是<span class="keyword">false</span>，则这个元素被销毁，不在dom中。但是v-<span class="keyword">show</span>的元素会始终被渲染并保存在dom中，它只是简单的切换css的dispaly属性。</span><br><span class="line"></span><br><span class="line">注意：v-<span class="keyword">if</span>有更高的切换开销</span><br><span class="line">v-<span class="keyword">show</span>有更高的初始渲染开销。</span><br><span class="line">因此，如果要非常频繁的切换，则使用v-<span class="keyword">show</span>较好；如果在运行时条件不太可能改变，则v-<span class="keyword">if</span>较好</span><br></pre></td></tr></table></figure>

<h4 id="10-v-for"><a href="#10-v-for" class="headerlink" title="10. v-for"></a>10. v-for</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">用v-for指令根据遍历数组来进行渲染</span><br><span class="line">有下面两种遍历形式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   //使用in，index是一个可选参数，表示当前项的索引</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item of items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   //使用of</span><br><span class="line"></span><br><span class="line">下面是一个例子，并且在v-for中，拥有对父作用域属性的完全访问权限。</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">        &#123;&#123;parent&#125;&#125;-&#123;&#123;item.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> example = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        parent:<span class="string">'父作用域'</span></span></span><br><span class="line">        items:[</span><br><span class="line"><span class="actionscript">          &#123;text:<span class="string">'文本1'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;text:<span class="string">'文本2'</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">会被渲染为：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>父作用域-文本1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>父作用域-文本2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">注意：当v-for和v-if同处于一个节点时，v-for的优先级比v-if更高。这意味着v-if将运行在每个v-for循环中</span><br></pre></td></tr></table></figure>

<h4 id="11-v-bind"><a href="#11-v-bind" class="headerlink" title="11. v-bind"></a>11. v-bind</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-bind用来动态的绑定一个或者多个特性。没有参数时，可以绑定到一个包含键值对的对象。常用于动态绑定class和style。以及href等。</span><br><span class="line">简写为一个冒号【  ：】</span><br><span class="line"><span class="tag">&lt;<span class="name">1</span>&gt;</span>对象语法：</span><br><span class="line">//进行类切换的例子</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当data里面定义的isActive等于true时，is-active这个类才会被添加起作用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当data里面定义的hasError等于true时，text-danger这个类才会被添加起作用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'is-active':isActive, 'text-danger':hasError&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,  </span></span><br><span class="line"><span class="actionscript">            hasError: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为hasError: false，所以text-danger不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"is-active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">2</span>&gt;</span>数组语法</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组语法：errorClass在data对应的类一定会添加--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--is-active是对象语法，根据activeClass对应的取值决定是否添加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[&#123;'is-active':activeClass&#125;,errorClass]"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            activeClass: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            errorClass: <span class="string">'text-danger'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为activeClass: false，所以is-active不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">3</span>&gt;</span>直接绑定数据对象</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在vue实例的data中定义了classObject对象，这个对象里面是所有类名及其真值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当里面的类的值是true时会被渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            classObject:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'is-active'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'text-danger'</span>:<span class="literal">true</span></span></span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为'is-active': false，所以is-active不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="12-v-model"><a href="#12-v-model" class="headerlink" title="12. v-model"></a>12. v-model</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">这个指令用于在表单上创建双向数据绑定。</span><br><span class="line">v-model会忽略所有表单元素的value、checked、selected特性的初始值。因为它选择Vue实例数据做为具体的值。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"somebody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello &#123;&#123;somebody&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            somebody:<span class="string">'小明'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这个例子中直接在浏览器input中输入别的名字，下面的p的内容会直接跟着变。这就是双向数据绑定。</span><br><span class="line">v-model修饰符</span><br><span class="line"><span class="tag">&lt;<span class="name">1</span>&gt;</span>  .lazy</span><br><span class="line">默认情况下，v-model同步输入框的值和数据。可以通过这个修饰符，转变为在change事件再同步。</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">2</span>&gt;</span>  .number</span><br><span class="line">自动将用户的输入值转化为数值类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">3</span>&gt;</span>  .trim</span><br><span class="line">自动过滤用户输入的首尾空格</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="13-v-on"><a href="#13-v-on" class="headerlink" title="13. v-on"></a>13. v-on</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">v-on主要用来监听dom事件，以便执行一些代码块。表达式可以是一个方法名。</span><br><span class="line">简写为：【  @  】</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"consoleLog"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            consoleLog:<span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">事件修饰符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.stop  阻止事件继续传播</span><br><span class="line"></span><br><span class="line">.prevent 事件不再重载页面</span><br><span class="line"></span><br><span class="line">.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</span><br><span class="line"></span><br><span class="line">.self 只当在 event.target 是当前元素自身时触发处理函数</span><br><span class="line"></span><br><span class="line">.once 事件将只会触发一次</span><br><span class="line"></span><br><span class="line">.passive 告诉浏览器你不想阻止事件的默认行为</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用v-on:click.prevent.self会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
