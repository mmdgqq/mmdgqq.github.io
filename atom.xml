<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三月十天</title>
  
  <subtitle>mmdgqq</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-09T03:23:36.652Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gqq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5express框架使用</title>
    <link href="http://yoursite.com/2020/03/09/5.express%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/09/5.express%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-09T07:50:59.000Z</published>
    <updated>2020-03-09T03:23:36.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开启服务"><a href="#1-开启服务" class="headerlink" title="1:开启服务"></a>1:开启服务</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);   <span class="comment">//引进包，返回的是有一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();   <span class="comment">//执行函数</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> res.send(<span class="string">"hello world"</span>);  <span class="comment">//服务器返回客户端用send方法</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="string">"localhost"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> host = server.address().address;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"example http://%s:%s"</span>, host, port);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-静态资源托管"><a href="#2-静态资源托管" class="headerlink" title="2:静态资源托管"></a>2:静态资源托管</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 托管静态资源</span></span><br><span class="line"><span class="comment"> 1:可以指定虚拟目录</span></span><br><span class="line"><span class="comment"> 2：可以指定多个目录作为静态资源的目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>)) <span class="comment">//'public'为静态资源（HTML，css,图片等的根目录）；</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"runing"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>静态资源包括（HTML，css,图片,js文件等)</p><p><a href="http://localhost:3000/hello.html" target="_blank" rel="noopener">http://localhost:3000/hello.html</a></p><h5 id="虚拟目录的概念以及优化代码"><a href="#虚拟目录的概念以及优化代码" class="headerlink" title="虚拟目录的概念以及优化代码"></a>虚拟目录的概念以及优化代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = app.use(<span class="string">'/abc'</span>, express.static(<span class="string">'public'</span>)) ;</span><br><span class="line">app.use(express.static(<span class="string">'hello'</span>))</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"runing"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>概念：虚拟目录是不存在的，只需要访问时加上的目录叫做虚拟目录</p><p>如上的静态资源根目录前加上 “/abc”,就是虚拟目录，再次访问<a href="http://localhost:3000/hello.html是访问不到的，因为虚拟目录改变了访问时静态资源目录，需要http://localhost:3000/abc/hello.html才可以访问到。" target="_blank" rel="noopener">http://localhost:3000/hello.html是访问不到的，因为虚拟目录改变了访问时静态资源目录，需要http://localhost:3000/abc/hello.html才可以访问到。</a></p><h1 id="3-基本路由处理"><a href="#3-基本路由处理" class="headerlink" title="3:基本路由处理"></a>3:基本路由处理</h1><p>`</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    路由（根据请求路径和请求方式进行路径分发处理）</span></span><br><span class="line"><span class="comment">    http的常用请求方式：</span></span><br><span class="line"><span class="comment">    post   添加</span></span><br><span class="line"><span class="comment">    get    查询</span></span><br><span class="line"><span class="comment">    put    更新</span></span><br><span class="line"><span class="comment">    delete 删除</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   ( restful  api(一个特殊的url地址，不加后缀))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./myrouter.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用use分发可以处理所有的路由请求</span></span><br><span class="line"><span class="comment">// app.use((req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send('ok');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// all方法绑定的路由与请求方式无关</span></span><br><span class="line"><span class="comment">// app.all('/abc',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.end('test router');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本的路由处理</span></span><br><span class="line"><span class="comment">// app.get('/',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send('get data');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.post('/',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send('post data');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.put('/',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send('put data');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.delete('/',(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     res.send('delete data');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------</span></span><br><span class="line"><span class="comment">// route方法可以指定特定的请求方式</span></span><br><span class="line"><span class="comment">// app.route('/hello')</span></span><br><span class="line"><span class="comment">//    .get((req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//        res.send('get data');</span></span><br><span class="line"><span class="comment">//    &#125;).post((req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//        res.send('post data');</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/admin'</span>,router);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-中间件"><a href="#4-中间件" class="headerlink" title="4:中间件"></a>4:中间件</h1><p>中间件就是一个处理过程</p><p>通过请求方式get post delete put（路由）挂载中间件，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">//通过请求方式（路由）挂载中间件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// route方法可以指定特定的请求方式</span></span><br><span class="line"><span class="comment">// app.route('/hello')</span></span><br><span class="line"><span class="comment">//    .get((req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//        res.send('get data');</span></span><br><span class="line"><span class="comment">//    &#125;).post((req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//        res.send('post data');</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cb0 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ceb0'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cb1 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ceb1'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cb2 = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">"cb2"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">app.get(<span class="string">'/ab'</span>, [cb0, cb1, cb2]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上[cb0, cb1, cb2])中的函数的引用就是中间件，按照顺序向后及进行</p><p>也可以函数的引用和函数一起使用</p><p><strong>通过next()方法走向下一个中间件</strong></p><h1 id="5-应用中间件"><a href="#5-应用中间件" class="headerlink" title="5:应用中间件"></a>5:应用中间件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    应用中间件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="comment">// 挂载内置中间件</span></span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载参数处理中间件（post）</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理get提交参数</span></span><br><span class="line">app.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.query;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    res.send(<span class="string">'get data'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理post提交参数</span></span><br><span class="line">app.post(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> data = req.body;</span><br><span class="line">    <span class="comment">// console.log(data);</span></span><br><span class="line">    <span class="keyword">if</span>(data.username == <span class="string">'admin'</span> &amp;&amp; data.password == <span class="string">'123'</span>)&#123;</span><br><span class="line">        res.send(<span class="string">'success'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="string">'failure'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：get/post参数处理的区别</strong></p><p> let data = req.query;</p><p> let data = req.body;</p><h1 id="6：模板引擎与express框架整合"><a href="#6：模板引擎与express框架整合" class="headerlink" title="6：模板引擎与express框架整合"></a>6：模板引擎与express框架整合</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 1：使express框架去兼容art-template模板引擎</span></span><br><span class="line">app.engine(<span class="string">'art'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br><span class="line"><span class="comment">// 2：设置模板的路径，前面的views 是固定的</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line"><span class="comment">//3: 设置模板引擎  'view engine'  是固定的，后面的‘art’是模板引擎的后缀，与步骤1中的‘art’是对应的</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'art'</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/list'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    title: <span class="string">'水果'</span>,</span><br><span class="line">    list: [<span class="string">'apple'</span>, <span class="string">'orahe'</span>, <span class="string">'banana'</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数一：模板名称；参数二：渲染模板的数据</span></span><br><span class="line">  res.render(<span class="string">'list'</span>, data)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"running"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在该文件的同级目录下新建目录views</p><p>在views 目录下新建文件 list.art</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   &#123;&#123;each list&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   &#123;&#123;/each&#125;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就会渲染出这个静态页面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-开启服务&quot;&gt;&lt;a href=&quot;#1-开启服务&quot; class=&quot;headerlink&quot; title=&quot;1:开启服务&quot;&gt;&lt;/a&gt;1:开启服务&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>7补充</title>
    <link href="http://yoursite.com/2020/03/09/7%E8%A1%A5%E5%85%85/"/>
    <id>http://yoursite.com/2020/03/09/7%E8%A1%A5%E5%85%85/</id>
    <published>2020-03-09T07:50:59.000Z</published>
    <updated>2020-03-09T03:32:59.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>简单说来呢，这个 package.json 文件就是定义了项目的各种元信息，包括项目的名称，git repo 的地址，作者等等。最重要的是，其中定义了我们项目的依赖，这样这个项目在部署时，我们就不必将 <code>node_modules</code> 目录也上传到服务器，服务器在拿到我们的项目时，只需要执行 <code>npm install</code>，则 npm 会自动读取 package.json 中的依赖并安装在项目的 <code>node_modules</code> 下面，然后程序就可以在服务器上跑起来了。</p><h1 id="一：理解node-js基于事件驱动"><a href="#一：理解node-js基于事件驱动" class="headerlink" title="一：理解node.js基于事件驱动"></a>一：理解node.js基于事件驱动</h1><p>绝大部分 Node.js 对象，比如 HTTP 请求、响应以及“流”，都使用了 <code>eventEmitter</code> 模块来支持监听和触发事件。</p><p>EventEmitter 是 Node.js 中基于事件驱动的架构的核心，它用于对象之间通信，很多 Node.js 的原生模块都继承自这个模块。</p><p>事件驱动最简单的形式是常见的 Node.js 函数回调，例如：<code>fs.readFile</code>。事件被触发时，Node 就会调用回调函数，所以回调函数可视为事件处理程序。</p><p>让我们来探究一下这个基础形式。</p><h4 id="Node，在你准备好的时候调用我吧！"><a href="#Node，在你准备好的时候调用我吧！" class="headerlink" title="Node，在你准备好的时候调用我吧！"></a>Node，在你准备好的时候调用我吧！</h4><p>以前没有原生的 promise、async/await 特性支持，Node 最原始的处理异步的方式是使用回调。</p><p>回调函数从本质上讲就是作为参数传递给其他函数的函数，在 JS 中这是可能的，因为函数是一等公民。</p><p>回调函数并不一定异步调用，这一点非常重要。在函数中，我们可以根据需要同步/异步调用回调函数。</p><p>例如，在下面例子中，主函数 <code>fileSize</code> 接收一个回调函数 <code>cb</code> 为参数，根据不同情况以同步/异步方式调用 <code>cb</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fileSize (fileName, cb) &#123;</span><br><span class="line">  if (typeof fileName !&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">    return cb(new TypeError(&#39;argument should be string&#39;)); &#x2F;&#x2F; 同步</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fs.stat(fileName, (err, stats) &#x3D;&gt; &#123;</span><br><span class="line">    if (err) &#123; return cb(err); &#125; &#x2F;&#x2F; 异步</span><br><span class="line"></span><br><span class="line">    cb(null, stats.size); &#x2F;&#x2F; 异步</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure><p>请注意，这并不是一个好的实践，它也许会带来一些预期外的错误。最好将主函数设计为始终同步或始终异步地使用回调。</p><p>我们再来看看下面这种典型的回调风格处理的异步 Node 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const readFileAsArray &#x3D; function(file, cb) &#123;</span><br><span class="line">  fs.readFile(file, function(err, data) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      return cb(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const lines &#x3D; data.toString().trim().split(&#39;\n&#39;);</span><br><span class="line">    cb(null, lines);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;复制代码</span><br></pre></td></tr></table></figure><p><code>readFileAsArray</code> 以一个文件路径和回调函数 callback 为参，读取文件并切割成行的数组来当做参数调用 callback。</p><p>这里有一个使用它的示例，假设同目录下我们有一个 <code>numbers.txt</code> 文件中有如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15复制代码</span><br></pre></td></tr></table></figure><p>要找出这个文件中的奇数的个数，我们可以像下面这样调用 <code>readFileAsArray</code> 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readFileAsArray(&#39;.&#x2F;numbers.txt&#39;, (err, lines) &#x3D;&gt; &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line"></span><br><span class="line">  const numbers &#x3D; lines.map(Number);</span><br><span class="line">  const oddNumbers &#x3D; numbers.filter(n &#x3D;&gt; n%2 &#x3D;&#x3D;&#x3D; 1);</span><br><span class="line">  console.log(&#39;Odd numbers count:&#39;, oddNumbers.length);</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure><p>这段代码会读取数组中的字符串，解析成数字并统计奇数个数。</p><p>在 NodeJS 的回调风格中的写法是这样的：回调函数的第一个参数是一个可能为 null 的错误对象 err，而回调函数作为主函数的最后一个参数传入。 你应该永远这么做，因为使用者们极有可能是这么以为的。</p><h4 id="现代-JavaScript-中回调函数的替代品"><a href="#现代-JavaScript-中回调函数的替代品" class="headerlink" title="现代 JavaScript 中回调函数的替代品"></a>现代 JavaScript 中回调函数的替代品</h4><p>在 ES6+ 中，我们有了 Promise 对象。对于异步 API，它是 callback 的有力竞争者。不再需要将 callback 作为参数传递的同时处理错误信息，Promise 对象允许我们分别处理成功和失败两种情况，并且链式的调用多个异步方法避免了回调的嵌套（callback hell，回调地狱）。</p><p>如果刚刚的 <code>readFileAsArray</code> 方法允许使用 Promise，它的调用将是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readFileAsArray(&#39;.&#x2F;numbers.txt&#39;)</span><br><span class="line">  .then(lines &#x3D;&gt; &#123;</span><br><span class="line">    const numbers &#x3D; lines.map(Number);</span><br><span class="line">    const oddNumbers &#x3D; numbers.filter(n &#x3D;&gt; n%2 &#x3D;&#x3D;&#x3D; 1);</span><br><span class="line">    console.log(&#39;Odd numbers count:&#39;, oddNumbers.length);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(console.error);复制代码</span><br></pre></td></tr></table></figure><p>作为调用 callback 的替代品，我们用 <code>.then</code> 函数来接受主方法的返回值，<code>.then</code> 中我们可以和之前在回调函数中一样处理数据，而对于错误我们用<code>.catch</code>函数来处理。</p><p>现代 JavaScript 中的 Promise 对象，使主函数支持 Promise 接口变得更加容易。我们把刚刚的 <code>readFileAsArray</code> 方法用改写一下以支持 Promise：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const readFileAsArray &#x3D; function(file, cb &#x3D; () &#x3D;&gt; &#123;&#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    fs.readFile(file, function(err, data) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        return cb(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const lines &#x3D; data.toString().trim().split(&#39;\n&#39;);</span><br><span class="line">      resolve(lines);</span><br><span class="line">      cb(null, lines);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;复制代码</span><br></pre></td></tr></table></figure><p>现在这个函数返回了一个 Promise 对象，该对象包含 <code>fs.readFile</code> 的异步调用，Promise 对象暴露了两个参数：<code>resolve</code> 函数和 <code>reject</code> 函数。</p><p><code>reject</code> 函数的作用就和我们之前 callback 中处理错误是一样的，而 <code>resolve</code> 函数也就和我们正常处理返回值一样。</p><p>剩下唯一要做的就是在实例中指定 <code>reject</code> <code>resolve</code> 函数的默认值，在 Promise 中，我们只要写一个空函数即可，例如 <code>() =&gt; {}</code>.</p><h4 id="在-async-await-中使用-Promise"><a href="#在-async-await-中使用-Promise" class="headerlink" title="在 async/await 中使用 Promise"></a>在 async/await 中使用 Promise</h4><p>当你需要循环异步函数时，使用 Promise 会让你的代码更易阅读，而如果使用回调函数，事情只会变得混乱。</p><p>Promise 是一个小小的进步，generator 是更大一些的小进步，但是 async/await 函数的到来，让这一步变得更有力了，它的编码风格让异步代码就像同步一样易读。</p><p>我们用 async/await 函数特性来改写刚刚的调用 <code>readFileAsArray</code> 过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">async function countOdd () &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const lines &#x3D; await readFileAsArray(&#39;.&#x2F;numbers&#39;);</span><br><span class="line">    const numbers &#x3D; lines.map(Number);</span><br><span class="line">    const oddCount &#x3D; numbers.filter(n &#x3D;&gt; n%2 &#x3D;&#x3D;&#x3D; 1).length;</span><br><span class="line">    console.log(&#39;Odd numbers count:&#39;, oddCount);</span><br><span class="line">  &#125; catch(err) &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countOdd();复制代码</span><br></pre></td></tr></table></figure><p>首先我们创建了一个 <code>async</code> 函数，只是在定义 function 的时候前面加了 <code>async</code> 关键字。在 <code>async</code> 函数里，使用关键字 <code>await</code> 使 <code>readFileAsArray</code> 函数好像返回普通变量一样，这之后的编码也好像 <code>readFileAsArray</code> 是同步方法一样。</p><p><code>async</code> 函数的执行过程非常易读，而处理错误只需要在异步调用外面包上一层 <code>try/catch</code> 即可。</p><p>在 <code>async/await</code> 函数中我们我们不需要使用任何特殊 API（像: <code>.then</code> 、 <code>.catch</code>\），我们仅仅使用了特殊关键字，并使用普通 JavaScript 编码即可。</p><p>我们可以在支持 Promise 的函数中使用 <code>async/await</code> 函数，但是不能在回调风格的异步方法中使用它，比如 <code>setTimeout</code> 等等。</p><h3 id="EventEmitter-模块"><a href="#EventEmitter-模块" class="headerlink" title="EventEmitter 模块"></a>EventEmitter 模块</h3><p>EventEmitter 是 Node.js 中基于事件驱动的架构的核心，它用于对象之间通信，很多 Node.js 的原生模块都继承自这个模块。</p><p>模块的概念很简单，Emitter 对象触发已命名事件，使之前已注册的监听器被调用，所以 Emitter 对象有两个主要特征：</p><ul><li>触发已命名事件</li><li>注册和取消注册监听函数</li></ul><p>如何使用呢？我们只需要创建一个类来继承 EventEmitter 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class MyEmitter extends EventEmitter &#123;</span><br><span class="line"></span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure><p>实例化前面我们基于 EventEmitter 创建的类，即可得到 Emitter 对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myEmitter &#x3D; new MyEmitter();复制代码</span><br></pre></td></tr></table></figure><p>在 Emitter 对象的生命周期中的任何一点，我们都可以用 emit 方法发出任何已命名的事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myEmitter.emit(&#39;something-happened&#39;);复制代码</span><br></pre></td></tr></table></figure><p>触发一个事件即某种情况发生的信号，这些情况通常是关于 Emitter 对象的状态改变的。</p><p>我们使用 <code>on</code> 方法来注册，然后这些监听的方法将会在每一个 Emitter 对象 emit 它们对应名称的事件的时候执行。</p><h4 id="事件-异步"><a href="#事件-异步" class="headerlink" title="事件 != 异步"></a>事件 != 异步</h4><p>让我们看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;);</span><br><span class="line"></span><br><span class="line">class WithLog extends EventEmitter &#123;</span><br><span class="line">  execute(taskFunc) &#123;</span><br><span class="line">    console.log(&#39;Before executing&#39;);</span><br><span class="line">    this.emit(&#39;begin&#39;);</span><br><span class="line">    taskFunc();</span><br><span class="line">    this.emit(&#39;end&#39;);</span><br><span class="line">    console.log(&#39;After executing&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const withLog &#x3D; new WithLog();</span><br><span class="line"></span><br><span class="line">withLog.on(&#39;begin&#39;, () &#x3D;&gt; console.log(&#39;About to execute&#39;));</span><br><span class="line">withLog.on(&#39;end&#39;, () &#x3D;&gt; console.log(&#39;Done with execute&#39;));</span><br><span class="line"></span><br><span class="line">withLog.execute(() &#x3D;&gt; console.log(&#39;*** Executing task ***&#39;));复制代码</span><br></pre></td></tr></table></figure><p>WithLog 类是一个 event emitter。它有一个 excute 方法，接收一个 taskFunc 任务函数作为参数，并将此函数的执行包含在 log 语句之间，分别在执行之前和之后调用了 emit 方法。</p><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Before executing</span><br><span class="line">About to execute</span><br><span class="line">*** Executing task ***</span><br><span class="line">Done with execute</span><br><span class="line">After executing复制代码</span><br></pre></td></tr></table></figure><p>我们需要注意的是所有的输出 log 都是同步的，在代码里没有任何异步操作。</p><ul><li>第一步 “Before executing”；</li><li>命名为 begin 的事件 emit 输出了 “About to execute”；</li><li>内含方法的执行输出了“<strong>* Executing task *</strong>”；</li><li>另一个命名事件输出“Done with execute”；</li><li>最后“After executing”。</li></ul><p>如同之前的回调方式，events 并不意味着同步或者异步。</p><p>这一点很重要，假如我们给 <code>excute</code> 传递异步函数 <code>taskFunc</code>，事件的触发就不再精确了。</p><p>可以使用 <code>setImmediate</code> 来模拟这种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ...</span><br><span class="line"></span><br><span class="line">withLog.execute(() &#x3D;&gt; &#123;</span><br><span class="line">  setImmediate(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;*** Executing task ***&#39;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure><p>会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Before executing</span><br><span class="line">About to execute</span><br><span class="line">Done with execute</span><br><span class="line">After executing</span><br><span class="line">*** Executing task ***复制代码</span><br></pre></td></tr></table></figure><p>这明显有问题，异步调用之后不再精确，“Done with execute”、“After executing”出现在了“<strong><em>Executing task</em></strong>”之前（应该在后）。</p><p>当异步方法结束的时候 emit 一个事件，我们需要把 callback/promise 与事件通信结合起来，刚刚的例子证明了这一点。</p><p>使用事件驱动来代替传统回调函数有一个好处是：在定义多个监听器后，我们可以多次对同一个 emit 做出反应。如果要用回调来做到这一点的话，我们需要些很多的逻辑在同一个回调函数中，事件是应用程序允许多个外部插件在应用程序核心之上构建功能的一个好方法，你可以把它们当作钩子点来允许利用状态变化做更多自定义的事。</p><h4 id="异步事件"><a href="#异步事件" class="headerlink" title="异步事件"></a>异步事件</h4><p>我们把刚刚的例子修改一下，将同步改为异步方式，让它更有意思一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">const EventEmitter &#x3D; require(&#39;events&#39;);</span><br><span class="line"></span><br><span class="line">class WithTime extends EventEmitter &#123;</span><br><span class="line">  execute(asyncFunc, ...args) &#123;</span><br><span class="line">    this.emit(&#39;begin&#39;);</span><br><span class="line">    console.time(&#39;execute&#39;);</span><br><span class="line">    asyncFunc(...args, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return this.emit(&#39;error&#39;, err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.emit(&#39;data&#39;, data);</span><br><span class="line">      console.timeEnd(&#39;execute&#39;);</span><br><span class="line">      this.emit(&#39;end&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const withTime &#x3D; new WithTime();</span><br><span class="line"></span><br><span class="line">withTime.on(&#39;begin&#39;, () &#x3D;&gt; console.log(&#39;About to execute&#39;));</span><br><span class="line">withTime.on(&#39;end&#39;, () &#x3D;&gt; console.log(&#39;Done with execute&#39;));</span><br><span class="line"></span><br><span class="line">withTime.execute(fs.readFile, __filename);复制代码</span><br></pre></td></tr></table></figure><p>WithTime 类执行 <code>asyncFunc</code> 函数，使用 <code>console.time</code> 和 <code>console.timeEnd</code> 来返回执行的时间，它 emit 了正确的序列在执行之前和之后，同样 emit error/data 来保证函数的正常工作。</p><p>我们给 <code>withTime</code> emitter 传递一个异步函数 <code>fs.readFile</code> 作为参数，这样就不再需要回调函数，只要监听 <code>data</code> 事件就可以了。</p><p>执行之后的结果如下，正如我们期待的正确事件序列，我们得到了执行的时间，这是很有用的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">About to execute</span><br><span class="line">execute: 4.507ms</span><br><span class="line">Done with execute复制代码</span><br></pre></td></tr></table></figure><p>请注意我们是如何将回调函数与事件发生器结合来完成的，如果 <code>asynFunc</code> 同样支持 Promise 的话，我们可以使用 <code>async/await</code> 特性来做到同样的事情：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class WithTime extends EventEmitter &#123;</span><br><span class="line">  async execute(asyncFunc, ...args) &#123;</span><br><span class="line">    this.emit(&#39;begin&#39;);</span><br><span class="line">    try &#123;</span><br><span class="line">      console.time(&#39;execute&#39;);</span><br><span class="line">      const data &#x3D; await asyncFunc(...args);</span><br><span class="line">      this.emit(&#39;data&#39;, data);</span><br><span class="line">      console.timeEnd(&#39;execute&#39;);</span><br><span class="line">      this.emit(&#39;end&#39;);</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">      this.emit(&#39;error&#39;, err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure><p>这真的看起来更易读了呢！<code>async/await</code> 特性使我们的代码更加贴近 JavaScript 本身，我认为这是一大进步。</p><h4 id="事件参数及错误"><a href="#事件参数及错误" class="headerlink" title="事件参数及错误"></a>事件参数及错误</h4><p>在之前的例子中，我们使用了额外的参数触发了两个事件。</p><p><code>error</code> 事件使用了 error 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.emit(&#39;error&#39;, err);复制代码</span><br></pre></td></tr></table></figure><p><code>data</code> 事件使用了 data 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.emit(&#39;data&#39;, data);复制代码</span><br></pre></td></tr></table></figure><p>我们可以在命名事件之后使用任何需要的参数，这些参数将在我们为命名事件注册的监听器函数内部可用。</p><p>例如：<code>data</code> 事件执行的时候，监听函数在注册的时候就会允许我们的接收事件触发的 data 参数，而 asyncFunc 函数也实实在在暴露给了我们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">withTime.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with data</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure><p><code>error</code> 事件通常是特例。在我们基于 callback 的例子中，如果没用监听函数来处理错误，Node 进程就会直接终止-。-</p><p>我们写个例子来展示这一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class WithTime extends EventEmitter &#123;</span><br><span class="line">  execute(asyncFunc, ...args) &#123;</span><br><span class="line">    console.time(&#39;execute&#39;);</span><br><span class="line">    asyncFunc(...args, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        return this.emit(&#39;error&#39;, err); &#x2F;&#x2F; Not Handled</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      console.timeEnd(&#39;execute&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const withTime &#x3D; new WithTime();</span><br><span class="line"></span><br><span class="line">withTime.execute(fs.readFile, &#39;&#39;); &#x2F;&#x2F; BAD CALL</span><br><span class="line">withTime.execute(fs.readFile, __filename);复制代码</span><br></pre></td></tr></table></figure><p>第一个 execute 函数的调用会触发一个错误，Node 进程会崩溃然后退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events.js:163</span><br><span class="line">      throw er; &#x2F;&#x2F; Unhandled &#39;error&#39; event</span><br><span class="line">      ^</span><br><span class="line">Error: ENOENT: no such file or directory, open &#39;&#39;复制代码</span><br></pre></td></tr></table></figure><p>第二个 excute 函数调用将受到之前崩溃的影响，可能并不会执行。</p><p>如果我们注册一个监听函数来处理 <code>error</code> 对象，情况就不一样了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">withTime.on(&#39;error&#39;, (err) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; do something with err, for example log it somewhere</span><br><span class="line">  console.log(err)</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure><p>加上了上面的错误处理，第一个 excute 调用的错误会被报告，但 Node 进程不会再崩溃退出了，其它的调用也会正常执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; Error: ENOENT: no such file or directory, open &#39;&#39; errno: -2, code: &#39;ENOENT&#39;, syscall: &#39;open&#39;, path: &#39;&#39; &#125;</span><br><span class="line">execute: 4.276ms复制代码</span><br></pre></td></tr></table></figure><p>记住：Node.js 目前的表现和 Promise 不同 ：只是输出警告，但最终会改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: ENOENT: no such file or directory, open &#39;&#39;</span><br><span class="line"></span><br><span class="line">DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.复制代码</span><br></pre></td></tr></table></figure><p>另一种处理异常的方法是注册一个全局的 uncaughtException 进程事件，但是，全局的捕获错误对象并不是一个好办法。</p><p>关于 uncaughtException 的建议是不要使用。你一定要用的话（比如说报告发生了什么或者做一些清理工作），应该让进程在此结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">process.on(&#39;uncaughtException&#39;, (err) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; something went unhandled.</span><br><span class="line">  &#x2F;&#x2F; Do any cleanup and exit anyway!</span><br><span class="line"></span><br><span class="line">  console.error(err); &#x2F;&#x2F; don&#39;t do just that.</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; FORCE exit the process too.</span><br><span class="line">  process.exit(1);</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure><p>然而，想象在同一时间发生多个错误事件。这意味着上述的 uncaughtException 监听器会多次触发，这可能对一些清理代码是个问题。一个典型例子是，多次调用数据库关闭操作。</p><p>EventEmitter 模块暴露一个 once 方法。这个方法仅允许调用一次监听器，而非每次触发都调用。所以，这是一个 uncaughtException 的实际用例，在第一次未捕获的异常发生时，我们开始做清理工作，并且知道我们最终会退出进程。</p><h4 id="监听器的顺序"><a href="#监听器的顺序" class="headerlink" title="监听器的顺序"></a>监听器的顺序</h4><p>如果我们在同一个事件上注册多个监听器，则监听器会按顺序触发，第一个注册的监听器就是第一个触发的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">withTime.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#96;Length: $&#123;data.length&#125;&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">withTime.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#96;Characters: $&#123;data.toString().length&#125;&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">withTime.execute(fs.readFile, __filename);复制代码</span><br></pre></td></tr></table></figure><p>上面代码的输出结果里，“Length” 将会在 “Characters” 之前，因为我们是按照这个顺序定义的。</p><p>如果你想定义一个监听器，还想插队到前面的话，要使用 prependListener 方法来注册。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">withTime.on(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#96;Length: $&#123;data.length&#125;&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">withTime.prependListener(&#39;data&#39;, (data) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#96;Characters: $&#123;data.toString().length&#125;&#96;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">withTime.execute(fs.readFile, __filename);复制代码</span><br></pre></td></tr></table></figure><p>上面的代码使得 “Characters” 在 “Length” 之前。</p><p>最后，想移除的话，用 removeListener 方法就好啦！</p><h1 id="二-阻塞I-O与非阻塞I-O"><a href="#二-阻塞I-O与非阻塞I-O" class="headerlink" title="二:阻塞I/O与非阻塞I/O"></a>二:阻塞I/O与非阻塞I/O</h1><h3 id="一、阻塞I-O"><a href="#一、阻塞I-O" class="headerlink" title="一、阻塞I/O"></a>一、阻塞I/O</h3><p>首先，要从你常用的IO操作谈起，比如read和write，通常IO操作都是阻塞I/O的，也就是说当你调用read时，如果没有数据收到，那么线程或者进程就会被挂起，直到收到数据。阻塞的意思，就是一直等着。阻塞I/O就是等着数据过来，进行读写操作。应用的函数进行调用，但是内核一直没有返回，就一直等着。应用的函数长时间处于等待结果的状态，我们就称为阻塞I/O。每个应用都得等着，每个应用都在等着，浪费啊！很像现实中的情况。大家都不干活，等着数据过来，过来工作一下，没有的话继续等着。</p><h3 id="二、非阻塞I-O"><a href="#二、非阻塞I-O" class="headerlink" title="二、非阻塞I/O"></a>二、非阻塞I/O</h3><p>非阻塞IO很简单，通过fcntl（POSIX）或ioctl（Unix）设为非阻塞模式，这时，当你调用read时，如果有数据收到，就返回数据，如果没有数据收到，就立刻返回一个错误，如EWOULDBLOCK。这样是不会阻塞线程了，但是你还是要不断的轮询来读取或写入。相当于你去查看有没有数据，告诉你没有，过一会再来吧！应用过一会再来问，有没有数据？没有数据，会有一个返回。但是依旧很不好。应用必须得过一会来一下，问问内核有木有数据啊。这和现实很像啊！好多情况都得去某些地方问问好了没有？木有，明天再过来。明天，好了木有？木有，后天再过来。。。。。忙碌的应用。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h1&gt;&lt;p&gt;简单说来呢，这个 package.json 文件就是定义了项
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>5express介绍</title>
    <link href="http://yoursite.com/2020/03/09/5express%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/03/09/5express%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-03-09T07:49:59.000Z</published>
    <updated>2020-03-09T03:23:47.016Z</updated>
    
    <content type="html"><![CDATA[<p>/*</p><p>  Node.js的Web开发相关的内容：</p><p>  1、Node.js不需要依赖第三方应用软件（Apache），可以基于api自己实现</p><p>  2、实现静态资源服务器</p><p>  3、路由处理</p><p>  4、动态网站</p><p>  5、模板引擎</p><p>  6、get和post参数传递和处理</p><p>  Web开发框架：express</p><p>*/</p><p>可以去查看express的官方文档</p><p><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">http://www.expressjs.com.cn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;/*&lt;/p&gt;
&lt;p&gt;  Node.js的Web开发相关的内容：&lt;/p&gt;
&lt;p&gt;  1、Node.js不需要依赖第三方应用软件（Apache），可以基于api自己实现&lt;/p&gt;
&lt;p&gt;  2、实现静态资源服务器&lt;/p&gt;
&lt;p&gt;  3、路由处理&lt;/p&gt;
&lt;p&gt;  4、动态网站&lt;/
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node_helloworld</title>
    <link href="http://yoursite.com/2020/03/09/3node_helloworld/"/>
    <id>http://yoursite.com/2020/03/09/3node_helloworld/</id>
    <published>2020-03-09T07:47:59.000Z</published>
    <updated>2020-03-09T03:13:35.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-两种运行方式"><a href="#1-两种运行方式" class="headerlink" title="1:两种运行方式"></a>1:两种运行方式</h2><p>   1:  在cmd中输入node  </p><p>​       输入js代码</p><p>   2：cd到指定目录下，node  文件名.js</p><h2 id="2-部分语法"><a href="#2-部分语法" class="headerlink" title="2:部分语法"></a>2:部分语法</h2><h3 id="1：全局成员概述"><a href="#1：全局成员概述" class="headerlink" title="1：全局成员概述"></a>1：全局成员概述</h3><p>   变量：</p><p>​         __filename</p><p>​        __dirname</p><p>构造函数 class ：</p><p>​     Buffer</p><p>函数</p><p>setTimeout(function () {}, 1000);</p><p>clearTimeout</p><p> 与模块化相关，是node的核心</p><p>exports</p><p>module</p><p>require()</p><h3 id="2：前端标准的模块化规范："><a href="#2：前端标准的模块化规范：" class="headerlink" title="2：前端标准的模块化规范："></a>2：前端标准的模块化规范：</h3><p>1：AMD - requires,js</p><p>2:  CMD —seajs</p><h3 id="3：服务端的模块化规范"><a href="#3：服务端的模块化规范" class="headerlink" title="3：服务端的模块化规范"></a>3：服务端的模块化规范</h3><p>1：CommonJs —-node.js</p><h4 id="1：模块化的相关规则"><a href="#1：模块化的相关规则" class="headerlink" title="1：模块化的相关规则"></a>1：模块化的相关规则</h4><h5 id="1：如何定义模块"><a href="#1：如何定义模块" class="headerlink" title="1：如何定义模块"></a>1：如何定义模块</h5><p>   一个js文件就是一个模块</p><h5 id="2：模块成员的导入和导出"><a href="#2：模块成员的导入和导出" class="headerlink" title="2：模块成员的导入和导出"></a>2：模块成员的导入和导出</h5><p>​    1: exports.sum = sum ;  //</p><p>​    2: module.exports = sum;  //</p><p>​    3:    global 模块成员导出</p><p>​           var flag = 123;</p><p>​          global.flag = flag;</p><h4 id="2-系统核心模块"><a href="#2-系统核心模块" class="headerlink" title="2:系统核心模块"></a>2:系统核心模块</h4><p> fs文件操作</p><p>http 网络操作</p><p>path 路径操作</p><p>querystring 查询参数解析</p><p>url   url解析</p><p>。。。。</p><h3 id="4：模块文件的后缀"><a href="#4：模块文件的后缀" class="headerlink" title="4：模块文件的后缀"></a>4：模块文件的后缀</h3><p>​    有3种情况  .js .json .node(c或者c++编译的)；</p><p>  不写文件后缀时上述三种模块的加载优先级   .js .json .node</p><p>​     </p><p>​     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-两种运行方式&quot;&gt;&lt;a href=&quot;#1-两种运行方式&quot; class=&quot;headerlink&quot; title=&quot;1:两种运行方式&quot;&gt;&lt;/a&gt;1:两种运行方式&lt;/h2&gt;&lt;p&gt;   1:  在cmd中输入node  &lt;/p&gt;
&lt;p&gt;​       输入js代码&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>2npm_nrm概念名命令</title>
    <link href="http://yoursite.com/2020/03/09/2npm_nrm%E6%A6%82%E5%BF%B5%E5%90%8D%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/03/09/2npm_nrm%E6%A6%82%E5%BF%B5%E5%90%8D%E5%91%BD%E4%BB%A4/</id>
    <published>2020-03-09T07:46:59.000Z</published>
    <updated>2020-03-09T03:09:47.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="几个概念："><a href="#几个概念：" class="headerlink" title="几个概念："></a>几个概念：</h1><p>nrm  nvm npm<br> nrm:管理连接环境 切换镜像<br> nvm :管理切换node版本<br>npm: node的包管理器</p><h2 id="一、什么是nrm"><a href="#一、什么是nrm" class="headerlink" title="一、什么是nrm"></a>一、什么是nrm</h2><p>nrm 是一个 npm 源管理器，允许你快速地在 npm源间切换。<br>什么意思呢，npm默认情况下是使用npm官方源（使用npm config ls命令可以查看），在国内用这个源肯定是不靠谱的，一般我们都会用淘宝npm源：<a href="https://registry.npm.taobao.org/，修改源的方式也很简单，在终端输入：" target="_blank" rel="noopener">https://registry.npm.taobao.org/，修改源的方式也很简单，在终端输入：</a><br>npm set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org/</a><br>再npm config ls查看，已经切换成功。<br>那么，问题来了，如果哪天你又跑去国外了，淘宝源肯定是用不了的，又要切换回官网源，或者哪天你们公司有自己的私有npm源了，又需要切换成公司的源，这样岂不很麻烦？于是有了nrm。</p><h2 id="二、nrm安装"><a href="#二、nrm安装" class="headerlink" title="二、nrm安装"></a>二、nrm安装</h2><p>npm install -g nrm</p><h2 id="三、nrm使用"><a href="#三、nrm使用" class="headerlink" title="三、nrm使用"></a>三、nrm使用</h2><p>1、查看可选源（带*号即为当前使用源）<br>nrm ls</p><p>2、查看当前使用源<br>nrm current</p><p>3、切换源<br>nrm use <registry><br>其中，registry为源名。<br>比如：切换为taobao源<br>nrm use taobao</p><p>4、添加源<br>nrm add <registry> <url><br>其中，registry为源名，url为源地址。<br>比如：添加一个公司私有的npm源，源地址为：<a href="http://192.168.22.11:8888/repository/npm-public/，源名为cpm（随意取）。" target="_blank" rel="noopener">http://192.168.22.11:8888/repository/npm-public/，源名为cpm（随意取）。</a><br>nrm add cpm <a href="http://192.168.22.11:8888/repository/npm-public/" target="_blank" rel="noopener">http://192.168.22.11:8888/repository/npm-public/</a></p><p>然后，查看是否添加成功</p><p>5、删除源<br>nrm del <registry><br>其中，registry为源名。<br>比如：删除刚才添加的cpm源<br>nrm del cpm</p><p>6、测试源速度（即响应时间）<br>nrm test <registry><br>其中，registry为源名。<br>比如：测试官方源和淘宝源的响应时间<br>nrm test npm</p><p>nrm test taobao</p><p>包管理器 npm<br>npm 可以自动管理包的依赖. 只需要安装你想要的包, 不必考虑这个包的依赖包.<br>在 PHP 中, 包管理使用的 Composer, python 中，包管理使用 easy_install 或者 pip，ruby 中我们使用 gem。<br>而在 Node.js 中，对应就是 npm，<br>npm 是 Node.js Package Manager 的意思。</p><p>npm init -y</p><p>-y 的含义：yes的意思，在init的时候省去了敲回车的步骤，生成的默认的package.json</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;几个概念：&quot;&gt;&lt;a href=&quot;#几个概念：&quot; class=&quot;headerlink&quot; title=&quot;几个概念：&quot;&gt;&lt;/a&gt;几个概念：&lt;/h1&gt;&lt;p&gt;nrm  nvm npm&lt;br&gt; nrm:管理连接环境 切换镜像&lt;br&gt; nvm :管理切换node版本&lt;br&gt;np
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>1nvm安装步骤</title>
    <link href="http://yoursite.com/2020/03/09/1nvm%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2020/03/09/1nvm%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-03-09T07:45:59.000Z</published>
    <updated>2020-03-09T03:07:58.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：下载"><a href="#1：下载" class="headerlink" title="1：下载"></a>1：下载</h1><p>可以到这里下载链接：<a href="https://pan.baidu.com/s/1wW4fH8XnXRiachXHb1Pckw" target="_blank" rel="noopener">https://pan.baidu.com/s/1wW4fH8XnXRiachXHb1Pckw</a> 密码：pn90<br>或者到github上下载最新版本<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><p>nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置<br>nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。<br>Source code(zip)：zip压缩的源码<br>Sourc code(tar.gz)：tar.gz的源码，一般用于*nix系统</p><h1 id="2：安装"><a href="#2：安装" class="headerlink" title="2：安装"></a>2：安装</h1><p>安装过程中默认的安装目录是下面连个</p><p>1：C:\Users\gy\AppData\Roaming\nvm</p><p>2:  C:\Program Files\nodejs</p><p>但是我们要用多版本的</p><p>   first：需要在c盘下新建一个文件夹dev,在dev文件夹下面建立连个子文件夹，一个nvm,一个nodejs</p><p>​    将nvm安装在这里。second:执行nvm安装目录下的install.cmd。Third:配置环境变量</p><p>   NVM_HOME—–nvm文件夹的地址,SYSLINK_HOME—-nodejs文件夹的地址，配置path.</p><p>3：安装成功后会出现版本号和一些操作命令，否则报 nvm commond not found</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200205114337627.png" alt="image-20200205114337627"></p><h1 id="3-修改setting文件"><a href="#3-修改setting文件" class="headerlink" title="3:修改setting文件"></a>3:修改setting文件</h1><p>在你安装的目录下找到settings.txt文件，打开后加上<br>node_mirror: <a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200205114556374.png" alt="image-20200205114556374"></p><p>这一步主要是将npm镜像改为淘宝的镜像，可以提高下载速度。</p><h1 id="4：使用"><a href="#4：使用" class="headerlink" title="4：使用"></a>4：使用</h1><p>nvm arch [32|64]： 显示node是运行在32位还是64位模式。指定32或64来覆盖默认体系结构。<br>-nvm install <version> [arch]：该可以是node.js版本或最新稳定版本latest。（可选[arch]）指定安装32位或64位版本（默认为系统arch）。设置[arch]为all以安装32和64位版本。在命令后面添加–insecure，可以绕过远端下载服务器的SSL验证。<br>nvm list [available]：列出已经安装的node.js版本。可选的available，显示可下载版本的部分列表。这个命令可以简写为nvm ls [available]。<br>nvm on： 启用node.js版本管理。<br>nvm off： 禁用node.js版本管理(不卸载任何东西)<br>nvm proxy [url]： 设置用于下载的代理。留[url]空白，以查看当前的代理。设置[url]为none删除代理。<br>nvm node_mirror [url]：设置node镜像，默认为<a href="https://nodejs.org/dist/.。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://nodejs.org/dist/.。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/node/</a><br>nvm npm_mirror [url]：设置npm镜像，默认为<a href="https://github.com/npm/npm/archive/。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://github.com/npm/npm/archive/。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/npm/</a><br>nvm uninstall <version>： 卸载指定版本的nodejs。<br>nvm use [version] [arch]： 切换到使用指定的nodejs版本。可以指定32/64位[arch]。<br>-nvm use <arch>：将继续使用所选版本，但根据提供的值切换到32/64位模式<br>nvm root [path]： 设置 nvm 存储node.js不同版本的目录 ,如果未设置，将使用当前目录。<br>-nvm version： 显示当前运行的nvm版本，可以简写为nvm v<br>首先，使用nvm list查看目前已经安装的版本</p><p>nvm list available 显示可下载版本的部分列表</p><p>nvm install 版本号 安装指定的版本的nodejs</p><p>nvm use 版本号 使用指定版本的nodejs</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：下载&quot;&gt;&lt;a href=&quot;#1：下载&quot; class=&quot;headerlink&quot; title=&quot;1：下载&quot;&gt;&lt;/a&gt;1：下载&lt;/h1&gt;&lt;p&gt;可以到这里下载链接：&lt;a href=&quot;https://pan.baidu.com/s/1wW4fH8XnXRiachXHb1
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>4node实现服务器配置_1步骤</title>
    <link href="http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_1%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_1%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-03-09T07:45:59.000Z</published>
    <updated>2020-03-09T03:24:14.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建服务"><a href="#1-创建服务" class="headerlink" title="1:创建服务"></a>1:创建服务</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//on  绑定请求事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer().on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> res.end(<span class="string">"hello"</span>);  </span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是简写形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http.createServer((req, res) =&gt; &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  res.end("ok");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;).listen(3000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//listen的第二个参数是 访问时的ip地址 eg: '196.1.1.2'</span></span><br></pre></td></tr></table></figure><h1 id="2-处理请求路径分发问题"><a href="#2-处理请求路径分发问题" class="headerlink" title="2:处理请求路径分发问题"></a>2:处理请求路径分发问题</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    处理请求路径的分发</span></span><br><span class="line"><span class="comment">    1、req对象是Class: http.IncomingMessage的实例对象</span></span><br><span class="line"><span class="comment">    2、res对象是Class: http.ServerResponse的实例对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.url可以获取URL中的路径（端口之后部分）</span></span><br><span class="line">    <span class="comment">// res.end(req.url);</span></span><br><span class="line">    <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/index'</span>))&#123;</span><br><span class="line">        <span class="comment">// write向客户端响应内容,可以写多次</span></span><br><span class="line">        res.write(<span class="string">'hello'</span>);</span><br><span class="line">        res.write(<span class="string">'hi'</span>);</span><br><span class="line">        res.write(<span class="string">'nihao'</span>);</span><br><span class="line">        <span class="comment">// end方法用来完成响应，只能执行一次</span></span><br><span class="line">        res.end();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/about'</span>))&#123;</span><br><span class="line">        res.end(<span class="string">'about'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.end(<span class="string">'no content'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>,<span class="string">'192.168.0.106'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-完整响应页面"><a href="#3-完整响应页面" class="headerlink" title="3:完整响应页面"></a>3:完整响应页面</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    响应完整的页面信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据路径读取文件的内容，并且响应到浏览器端</span></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function">(<span class="params">url,res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path.join(__dirname,<span class="string">'www'</span>,url),<span class="string">'utf8'</span>,(err,fileContent)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.end(<span class="string">'server error'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.end(fileContent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 处理路径的分发</span></span><br><span class="line">    <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/index'</span>))&#123;</span><br><span class="line">        readFile(<span class="string">'index.html'</span>,res);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/about'</span>))&#123;</span><br><span class="line">        readFile(<span class="string">'about.html'</span>,res);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/list'</span>))&#123;</span><br><span class="line">        readFile(<span class="string">'list.html'</span>,res);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 设置相应类型和编码</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset=utf8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(<span class="string">'页面被狗狗叼走了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>,<span class="string">'192.168.0.106'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-响应头的合理设置"><a href="#4-响应头的合理设置" class="headerlink" title="4:响应头的合理设置"></a>4:响应头的合理设置</h1><p>以下代码抽成了一个模块，直接require即可使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'./mime.json'</span>);</span><br><span class="line"></span><br><span class="line">exports.staticServer = <span class="function">(<span class="params">req,res,root</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path.join(root,req.url),(err,fileContent)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="comment">// 没有找到对应文件</span></span><br><span class="line">            res.writeHead(<span class="number">404</span>,&#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>:<span class="string">'text/plain; charset=utf8'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(<span class="string">'页面被狗狗叼走了'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> dtype = <span class="string">'text/html'</span>;</span><br><span class="line">            <span class="comment">// 获取请求文件的后缀</span></span><br><span class="line">            <span class="keyword">let</span> ext = path.extname(req.url);</span><br><span class="line">            <span class="comment">// 如果请求的文件后缀合理，就获取到标准的响应格式</span></span><br><span class="line">            <span class="keyword">if</span>(mime[ext])&#123;</span><br><span class="line">                dtype = mime[ext];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果响应的内容是文本，就设置成utf8编码</span></span><br><span class="line">            <span class="keyword">if</span>(dtype.startsWith(<span class="string">'text'</span>))&#123;</span><br><span class="line">                dtype += <span class="string">'; charset=utf8'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置响应头信息</span></span><br><span class="line">            res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>:dtype</span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(fileContent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> ss = <span class="built_in">require</span>(<span class="string">'./06.js'</span>);    <span class="comment">//即 ，如上的模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// ss.staticServer(req,res,path.join(__dirname,'www'));</span></span><br><span class="line">    ss.staticServer(req,res,path.join(<span class="string">'C:\\Users\\www\\Desktop'</span>,<span class="string">'test'</span>));</span><br><span class="line">&#125;).listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running....'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="5-get参数处理-url核心模块"><a href="#5-get参数处理-url核心模块" class="headerlink" title="5:get参数处理-url核心模块"></a>5:get参数处理-url核心模块</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    get参数处理-url核心模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// const url = require('url');</span></span><br><span class="line"><span class="comment">// parse方法的作用就是把URL字符串转化为对象</span></span><br><span class="line"><span class="comment">// let str = 'http://www.baidu.com/abc/qqq?flag=123&amp;keyword=java';</span></span><br><span class="line"><span class="comment">// let ret = url.parse(str,true);</span></span><br><span class="line"><span class="comment">// console.log(ret.query.keyword);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// format的作用就是把对象转化为标准的URL字符串</span></span><br><span class="line"><span class="comment">// let obj = &#123;</span></span><br><span class="line"><span class="comment">//   protocol: 'http:',</span></span><br><span class="line"><span class="comment">//   slashes: true,</span></span><br><span class="line"><span class="comment">//   auth: null,</span></span><br><span class="line"><span class="comment">//   host: 'www.baidu.com',</span></span><br><span class="line"><span class="comment">//   port: null,</span></span><br><span class="line"><span class="comment">//   hostname: 'www.baidu.com',</span></span><br><span class="line"><span class="comment">//   hash: null,</span></span><br><span class="line"><span class="comment">//   search: '?flag=123&amp;keyword=java',</span></span><br><span class="line"><span class="comment">//   query: 'flag=123&amp;keyword=java',</span></span><br><span class="line"><span class="comment">//   pathname: '/abc/qqq',</span></span><br><span class="line"><span class="comment">//   path: '/abc/qqq?flag=123&amp;keyword=java',</span></span><br><span class="line"><span class="comment">//   href: 'http://www.baidu.com/abc/qqq?flag=123&amp;keyword=java' </span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">// let ret1 = url.format(obj);</span></span><br><span class="line"><span class="comment">// console.log(ret1);</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    例子：</span></span><br><span class="line"><span class="comment">    get参数解析</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  res.end(obj.query.username + <span class="string">"====="</span> + obj.query.password);</span><br><span class="line">&#125;).listen(<span class="number">3001</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running....'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当请求地址为：</p><p><a href="http://127.0.0.1:3001/?username=123&amp;&amp;password=12345" target="_blank" rel="noopener">http://127.0.0.1:3001/?username=123&amp;&amp;password=12345</a></p><p> 界面输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;12345</span><br></pre></td></tr></table></figure><h1 id="6-post参数处理"><a href="#6-post参数处理" class="headerlink" title="6:post参数处理"></a>6:post参数处理</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    post参数处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse方法的作用就是把字符串转成对象</span></span><br><span class="line"><span class="comment">// let param = 'username=lisi&amp;password=123';</span></span><br><span class="line"><span class="comment">// let param = 'foo=bar&amp;abc=xyz&amp;abc=123';</span></span><br><span class="line"><span class="comment">// let obj = querystring.parse(param);</span></span><br><span class="line"><span class="comment">// console.log(obj);</span></span><br><span class="line"><span class="comment">// // stringify的作用就是把对象转成字符串</span></span><br><span class="line"><span class="comment">// let obj1 = &#123;</span></span><br><span class="line"><span class="comment">//     flag : '123',</span></span><br><span class="line"><span class="comment">//     abc : ['hello','hi']</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let str1 = querystring.stringify(obj1);</span></span><br><span class="line"><span class="comment">// console.log(str1);</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/login'</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> pdata = <span class="string">''</span>;</span><br><span class="line">        req.on(<span class="string">'data'</span>,(chunk)=&gt;&#123;</span><br><span class="line">            <span class="comment">// 每次获取一部分数据，</span></span><br><span class="line">            pdata += chunk; <span class="comment">//每次都拼接一下</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        req.on(<span class="string">'end'</span>,()=&gt;&#123;</span><br><span class="line">            <span class="comment">// 这里才能得到完整的数据</span></span><br><span class="line">            <span class="built_in">console</span>.log(pdata);</span><br><span class="line">            <span class="keyword">let</span> obj = querystring.parse(pdata);  <span class="comment">//转成对象</span></span><br><span class="line">            res.end(obj.username+<span class="string">'-----'</span>+obj.password);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-创建服务&quot;&gt;&lt;a href=&quot;#1-创建服务&quot; class=&quot;headerlink&quot; title=&quot;1:创建服务&quot;&gt;&lt;/a&gt;1:创建服务&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>4node实现服务器配置_2规范与字段分析</title>
    <link href="http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_2%E8%A7%84%E8%8C%83%E4%B8%8E%E5%AD%97%E6%AE%B5%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_2%E8%A7%84%E8%8C%83%E4%B8%8E%E5%AD%97%E6%AE%B5%E5%88%86%E6%9E%90/</id>
    <published>2020-03-09T07:45:59.000Z</published>
    <updated>2020-03-09T03:24:26.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：包的规范"><a href="#1：包的规范" class="headerlink" title="1：包的规范"></a>1：包的规范</h1><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207103415675.png" alt="image-20200207103415675"></p><h2 id="2：package-json字段分析"><a href="#2：package-json字段分析" class="headerlink" title="2：package.json字段分析"></a>2：package.json字段分析</h2><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207103453861.png" alt="image-20200207103453861"></p><p>入口文件</p><p>makedown的稍微一点的语法</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200207104123220.png" alt="image-20200207104123220"></p><p>npm install makedown-it –sava  ,</p><p>这个工具可以将makedown 转化为html语法(知道有这个工具既可以）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：包的规范&quot;&gt;&lt;a href=&quot;#1：包的规范&quot; class=&quot;headerlink&quot; title=&quot;1：包的规范&quot;&gt;&lt;/a&gt;1：包的规范&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>4node实现服务器配置_3登录验证功能例子</title>
    <link href="http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD%E4%BE%8B%E5%AD%90/"/>
    <id>http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD%E4%BE%8B%E5%AD%90/</id>
    <published>2020-03-09T07:45:59.000Z</published>
    <updated>2020-03-09T03:24:37.166Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    登录验证功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> ss = <span class="built_in">require</span>(<span class="string">'./06.js'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 启动静态资源服务</span></span><br><span class="line">    <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/www'</span>))&#123;</span><br><span class="line">        ss.staticServer(req,res,__dirname);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    <span class="comment">// 动态资源</span></span><br><span class="line">    <span class="keyword">if</span>(req.url.startsWith(<span class="string">'/login'</span>))&#123;</span><br><span class="line">        <span class="comment">// get请求</span></span><br><span class="line">        <span class="keyword">if</span>(req.method == <span class="string">'GET'</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> param = url.parse(req.url,<span class="literal">true</span>).query;</span><br><span class="line">            <span class="keyword">if</span>(param.username == <span class="string">'admin'</span> &amp;&amp; param.password == <span class="string">'123'</span>)&#123;</span><br><span class="line">                res.end(<span class="string">'get success'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.end(<span class="string">'get failure'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// post请求</span></span><br><span class="line">        <span class="keyword">if</span>(req.method == <span class="string">'POST'</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> pdata = <span class="string">''</span>;</span><br><span class="line">            req.on(<span class="string">'data'</span>,(chunk)=&gt;&#123;</span><br><span class="line">                pdata += chunk;</span><br><span class="line">            &#125;);</span><br><span class="line">            req.on(<span class="string">'end'</span>,()=&gt;&#123;</span><br><span class="line">                <span class="keyword">let</span> obj = querystring.parse(pdata);</span><br><span class="line">                <span class="keyword">if</span>(obj.username == <span class="string">'admin'</span> &amp;&amp; obj.password == <span class="string">'123'</span>)&#123;</span><br><span class="line">                    res.end(<span class="string">'post success'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.end(<span class="string">'post failure'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running....'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>4node实现服务器配置_4使用模板引擎对数据做填充和渲染</title>
    <link href="http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_4%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%81%9A%E5%A1%AB%E5%85%85%E5%92%8C%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2020/03/09/4node%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE_4%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%81%9A%E5%A1%AB%E5%85%85%E5%92%8C%E6%B8%B2%E6%9F%93/</id>
    <published>2020-03-09T07:45:59.000Z</published>
    <updated>2020-03-09T03:24:45.427Z</updated>
    
    <content type="html"><![CDATA[<p>art-template</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;art-template&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="node.js基础" scheme="http://yoursite.com/categories/node-js%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>4使用</title>
    <link href="http://yoursite.com/2020/03/06/4%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/06/4%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-06T09:16:14.000Z</published>
    <updated>2020-03-06T09:23:42.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：目录结构"><a href="#1：目录结构" class="headerlink" title="1：目录结构"></a>1：目录结构</h1><p>dist  是项目做完之后把发布的东西放在里面的一个目录</p><p>​       是表示这里存放的一个产品级别的目录</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213162350430.png" alt="image-20200213162350430"></p><p>main.js是项目的入口文件</p><p>index.html是项目的首页</p><h1 id="2：基本使用"><a href="#2：基本使用" class="headerlink" title="2：基本使用"></a>2：基本使用</h1><p><strong>1：</strong>import  $ from ‘jquery’</p><p>import 是es6的语法。 from后面是模板文件的位置</p><p>​                                       如果只是模块名，可以不带有路径</p><p>​                                       但是需要配置文件告诉路径在哪里</p><p>​                                        后缀可以省略</p><p><strong>2：</strong>webpack可以处理js的兼容问题</p><p><strong>3：</strong>在安装好webpack工具的前提下，可以使用如下命令进行对文件进行打包</p><p><strong>webpack  要打包的文件的路径  打包好的文件的路径</strong></p><h1 id="3：配置"><a href="#3：配置" class="headerlink" title="3：配置"></a>3：配置</h1><p>在根目录下新建webpack的配置文件</p><p>webpack.config.js</p><h2 id="1：配置webpack自动监听代码的改变"><a href="#1：配置webpack自动监听代码的改变" class="headerlink" title="1：配置webpack自动监听代码的改变"></a>1：配置webpack自动监听代码的改变</h2><h3 id="1：简单配置"><a href="#1：简单配置" class="headerlink" title="1：简单配置"></a>1：简单配置</h3><p>   使用webpack -dev-server 这个工具，来实现自动打包编译的功能</p><p>   npm  i webpack-dev-server -D</p><p>安装完之后当代码改动之后，在控制台运行命令webpack-dev-server就会自动打包代码了，</p><p>但是可以运行的命令是需要全局安装的</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213185054958.png" alt="image-20200213185054958"></p><p>在package.json中配置一下，</p><p>在命令行中输入 npm run dev 就可以运行了</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213190424748.png" alt="image-20200213190424748"></p><p>这个工具帮我们在项目的根目录下放置了一个虚拟的bundle.js</p><p>并且启动了一个服务器</p><h3 id="2：更便捷的配置"><a href="#2：更便捷的配置" class="headerlink" title="2：更便捷的配置"></a>2：更便捷的配置</h3><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213190749876.png" alt="image-20200213190749876"></p><p><strong>–open –port 3000  –contentBase src  –hot</strong></p><p>在我们npm run dev 之后可以实现自动的打开服务器指定端口下的文件夹</p><p>–contentBase src  可以指定 默认打开的文件（ src下放的首页）</p><p>–hot   热重载，热更新（减少不必要的代码的更新）</p><h2 id="2：配置将页面也加载在内存中"><a href="#2：配置将页面也加载在内存中" class="headerlink" title="2：配置将页面也加载在内存中"></a>2：配置将页面也加载在内存中</h2><p>利用html-webpack-plugin 插件</p><p>`</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require('html-webpack-plugin'); //通过 npm 安装</span><br><span class="line">const webpack = require('webpack'); //访问内置的插件</span><br><span class="line">const path = require('path');</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">  entry: './path/to/my/entry/file.js',</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: 'my-first-webpack.bundle.js',</span><br><span class="line">    path: path.resolve(__dirname, 'dist')</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;template: './src/index.html'&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure><p>`</p><p>这样呢，在内存中会生成一个新的html的文件，并且会引入bundle.js</p><h2 id="3：配置css打包css文件"><a href="#3：配置css打包css文件" class="headerlink" title="3：配置css打包css文件"></a>3：配置css打包css文件</h2><h3 id="1：处理css"><a href="#1：处理css" class="headerlink" title="1：处理css"></a>1：处理css</h3><p>1：webpack默认打包处理js文件，无法处理其他 文件</p><p>2:处理其他文件需要安装 第三方的loader 加载</p><p>3：打包css 需要安装  css-loader style-loader</p><p>4: 安装好之后需要在webpack.config.js的</p><p>   module 节点中配置这些加载器</p><p>   因为webpack文档更新的原因，具体应当以官方为准</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214121951970.png" alt="image-20200214121951970"></p><p>   在调用loader的时候是从后往前调用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-处理less"><a href="#2-处理less" class="headerlink" title="2:处理less"></a>2:处理less</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: /\.less$/,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: "style-loader" // creates style nodes from JS strings</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: "css-loader" // translates CSS into CommonJS</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: "less-loader" // compiles Less to CSS</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用法同css</p><p>但是这样的样式文件时依赖于javascript的，</p><p>所以生产上建议：使用一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract-text-webpack-plugin</span><br></pre></td></tr></table></figure><p>建议使用<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="noopener">ExtractTextPlugin</a>将样式表提取到生产中的专用文件中。这样，您的样式就不会依赖JavaScript：</p><p><a href="https://www.webpackjs.com/loaders/less-loader/" target="_blank" rel="noopener">https://www.webpackjs.com/loaders/less-loader/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> extractLess = <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"[name].[contenthash].css"</span>,</span><br><span class="line">    disable: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: extractLess.extract(&#123;</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"less-loader"</span></span><br><span class="line">                &#125;],</span><br><span class="line">                <span class="comment">// use style-loader in development</span></span><br><span class="line">                fallback: <span class="string">"style-loader"</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        extractLess</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-配置关于路径url问题"><a href="#4-配置关于路径url问题" class="headerlink" title="4:配置关于路径url问题"></a>4:配置关于路径url问题</h2><h3 id="1-安装和基本使用"><a href="#1-安装和基本使用" class="headerlink" title="1:安装和基本使用"></a>1:安装和基本使用</h3><p>默认情况下，webpack无法处理css文件中的url地址，不管是图片还是字体库，只要是url都处理不了</p><p>如果用到了路径，需要安装url-loader,file-loader 加载器</p><p>url-loader依赖于file-loader  </p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214124142860.png" alt="image-20200214124142860"></p><p>  name:设置打包后的名字  上图这么写 是为了  打包前叫什么名字，打包后还叫什么名字</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214140811096.png" alt="image-20200214140811096"></p><p>如上红框的值是为了防止图片名冲突的一种方法，取生成的图片的hsah值的前8位拼接上 图片名</p><h2 id="5：配置url处理字体"><a href="#5：配置url处理字体" class="headerlink" title="5：配置url处理字体"></a>5：配置url处理字体</h2><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214142029580.png" alt="image-20200214142029580"></p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214142230147.png" alt="image-20200214142230147"></p><p>test中要把五种字体文件都写上去</p><h2 id="6：配置babel"><a href="#6：配置babel" class="headerlink" title="6：配置babel"></a>6：配置babel</h2><p>在webpack中 ,默认只能处理一部分es6的语法，一则更高的es6或者es7的语法，webpack是处理不了的，这时候，需要借助babael转换成为可以处理的代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader babel-core babel-preset-env webpack</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200214143938994.png" alt="image-20200214143938994"></p><p>@babel/preset-env  也需要安装一下</p><p>总之出现错误看提示</p><p>配置文件.babelrc文件的配置（.babelrc是Babel的配置文件，放在项目根目录下，使用Babel的第一步就是配置这个文件。该文件用来设置转码规则和插件，基本格式如下。）</p><p>熟悉linux的话一定知道，rc结尾的文件通常代表运行时自动加载的文件，配置等等</p><h3 id="1-babelrc文件是用来干嘛的？"><a href="#1-babelrc文件是用来干嘛的？" class="headerlink" title="1. .babelrc文件是用来干嘛的？"></a>1. .babelrc文件是用来干嘛的？</h3><p>.babelrc是Babel的配置文件，放在项目根目录下，使用Babel的第一步就是配置这个文件。</p><h3 id="2-如何配置该文件"><a href="#2-如何配置该文件" class="headerlink" title="2. 如何配置该文件"></a>2. 如何配置该文件</h3><p>该文件用来设置转码规则和插件，基本格式如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [],</span><br><span class="line">    <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-react</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-<span class="number">0</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-<span class="number">1</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-<span class="number">2</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-<span class="number">3</span></span><br></pre></td></tr></table></figure><p>然后，将这些规则加入.babelrc。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>presets 其实就是一堆plugins的预设起到了方便的作用 如果不采用 presets 完全可以单独引用某个功能</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</span><br><span class="line">    <span class="attr">"comments"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1：目录结构&quot;&gt;&lt;a href=&quot;#1：目录结构&quot; class=&quot;headerlink&quot; title=&quot;1：目录结构&quot;&gt;&lt;/a&gt;1：目录结构&lt;/h1&gt;&lt;p&gt;dist  是项目做完之后把发布的东西放在里面的一个目录&lt;/p&gt;
&lt;p&gt;​       是表示这里存放的一个
      
    
    </summary>
    
    
      <category term="webpack基础" scheme="http://yoursite.com/categories/webpack%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>3安装</title>
    <link href="http://yoursite.com/2020/03/06/3%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/03/06/3%E5%AE%89%E8%A3%85/</id>
    <published>2020-03-06T09:15:14.000Z</published>
    <updated>2020-03-06T09:23:31.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h1><p>webpack是一个项目打包工具，使用前需要先安装工具</p><p><a href="https://blog.csdn.net/hxy19971101/article/details/79558599" target="_blank" rel="noopener">https://blog.csdn.net/hxy19971101/article/details/79558599</a></p><p>1： <strong>npm i webpack -g</strong>   全局安装</p><p><strong>2:npm i webpack-cli -g (新版本webpack安装的时候必须要webpack-cli)</strong></p><p>3:在path中配置webpack环境变量（C:\Program Files\nodejs\node_global）是安装在node的安装目录下的node_global下</p><p>*<em>npm i webpack –save–dev *</em>   项目安装</p><p>如果没有正确安装，在cmd中会出现命令不可以使用的错误</p><p>–save：将保存配置信息到pacjage.json。默认为dependencies节点中。</p><p>–dev：将保存配置信息devDependencies节点中。</p><p>因此：</p><p>–save：将保存配置信息到pacjage.json的dependencies节点中。</p><p>–save-dev：将保存配置信息到pacjage.json的devDependencies节点中。</p><p>dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块</p><p>devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它。</p><p>npm install module_name -S  即  npm install module_name –save  写入dependencies</p><p>npm install module_name -D  即  npm install module_name –save-dev 写入devDependencies</p><p>npm install module_name -g 全局安装(命令行使用)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装方式&quot;&gt;&lt;a href=&quot;#安装方式&quot; class=&quot;headerlink&quot; title=&quot;安装方式&quot;&gt;&lt;/a&gt;安装方式&lt;/h1&gt;&lt;p&gt;webpack是一个项目打包工具，使用前需要先安装工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.
      
    
    </summary>
    
    
      <category term="webpack基础" scheme="http://yoursite.com/categories/webpack%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>2引入</title>
    <link href="http://yoursite.com/2020/03/06/2%E5%BC%95%E5%85%A5/"/>
    <id>http://yoursite.com/2020/03/06/2%E5%BC%95%E5%85%A5/</id>
    <published>2020-03-06T09:14:14.000Z</published>
    <updated>2020-03-06T09:22:20.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1:问题"></a>1:问题</h1><p>1：在网页中静态资源多了之后，会使网页的加载速度变慢，</p><p>因为会发起很多的二次请求</p><p>可以使用  —-合并 压缩，精灵图 ，图片的base64编码（适合小图片）去处理，加快网页加载</p><p>2：bootstrap是依赖jauery包的，</p><p>​     单独使用需要</p><p>   处理错综复杂的包依赖关系</p><h1 id="2-webpack"><a href="#2-webpack" class="headerlink" title="2:webpack"></a>2:webpack</h1><p>​       是一个项目构建工具，基于node.js</p><p>   与gulp的区别：gulp是基于task任务的</p><p>​                             webpack是基于项目进行的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题&quot;&gt;&lt;a href=&quot;#1-问题&quot; class=&quot;headerlink&quot; title=&quot;1:问题&quot;&gt;&lt;/a&gt;1:问题&lt;/h1&gt;&lt;p&gt;1：在网页中静态资源多了之后，会使网页的加载速度变慢，&lt;/p&gt;
&lt;p&gt;因为会发起很多的二次请求&lt;/p&gt;
&lt;p&gt;可以使用  —
      
    
    </summary>
    
    
      <category term="webpack基础" scheme="http://yoursite.com/categories/webpack%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目结构及文件介绍-- build文件夹</title>
    <link href="http://yoursite.com/2020/03/06/17vue%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D-build%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://yoursite.com/2020/03/06/17vue%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D-build%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2020-03-06T09:13:14.000Z</published>
    <updated>2020-03-06T09:15:20.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue项目结构及文件介绍——-build文件夹"><a href="#vue项目结构及文件介绍——-build文件夹" class="headerlink" title="vue项目结构及文件介绍—— build文件夹"></a>vue项目结构及文件介绍—— build文件夹</h1><p><img src="https://user-gold-cdn.xitu.io/2019/4/19/16a3348f0434256c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><ol><li><p>build 文件夹，用来存放项目构建脚本</p></li><li><p>config 中存放项目的一些基本配置信息，最常用的就是端口转发</p></li><li><p>node_modules 这个目录存放的是项目的所有依赖，即 npm install 命令下载下来的文件</p></li><li><p>src 这个目录下存放项目的源码，即开发者写的代码放在这里</p></li><li><p>static 用来存放静态资源</p></li><li><p>index.html 则是项目的首页，入口页，也是整个项目唯一的HTML页面</p></li><li><p>package.json 中定义了项目的所有依赖，包括开发时依赖和发布时依赖</p><a id="more"></a></li></ol><p>对于开发者来说，以后 99.99% 的工作都是在 src 中完成的，src 中的文件目录如下：</p><p><img src="https://user-gold-cdn.xitu.io/2019/4/19/16a3348f0134236e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><ol><li>assets 目录用来存放资产文件</li><li>components 目录用来存放组件（一些可复用，非独立的页面），当然开发者也可以在 components 中直接创建完整页面。</li><li>推荐在 components 中存放组件，另外单独新建一个 page 文件夹，专门用来放完整页面。</li><li>router 目录中，存放了路由的js文件</li><li>App.vue 是一个Vue组件，也是项目的第一个Vue组件</li><li>main.js相当于Java中的main方法，是整个项目的入口js</li></ol><h1 id="1-bulid"><a href="#1-bulid" class="headerlink" title="1:bulid"></a>1:bulid</h1><h2 id="1build-js"><a href="#1build-js" class="headerlink" title="1build.js"></a>1build.js</h2><p><code>build文件夹</code>里面是对 webpack 开发和打包的相关设置，包括入口文件、输出文件、使用的模块等；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span> <span class="comment">// js的严格模式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)() <span class="comment">// node和npm的版本检查</span></span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span> <span class="comment">// 设置环境变量为生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导进各模块</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>) <span class="comment">// loading模块</span></span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'building for production...'</span>)</span><br><span class="line">spinner.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// rm方法删除dist/static文件夹</span></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err <span class="comment">//若删除中有错误则抛出异常并终止程序</span></span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123; <span class="comment">//若没有错误则继续执行，构建webpack</span></span><br><span class="line">    spinner.stop() <span class="comment">//结束loading动画</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err <span class="comment">//若有异常则抛出</span></span><br><span class="line">    process.stdout.write(stats.toString(&#123; <span class="comment">//标准输出流，类似于console.log</span></span><br><span class="line">      colors: <span class="literal">true</span>, <span class="comment">// 增加控制台颜色开关</span></span><br><span class="line">      modules: <span class="literal">false</span>, <span class="comment">// 是否增加内置模块信息</span></span><br><span class="line">      children: <span class="literal">false</span>, <span class="comment">// If you are using ts-loader, setting this to true will make TypeScript errors show up during build.</span></span><br><span class="line">      chunks: <span class="literal">false</span>, <span class="comment">// 允许较少的输出</span></span><br><span class="line">      chunkModules: <span class="literal">false</span> <span class="comment">// 编译过程持续打印</span></span><br><span class="line">    &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译出错的信息</span></span><br><span class="line">    <span class="keyword">if</span> (stats.hasErrors()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">'  Build failed with errors.\n'</span>))</span><br><span class="line">      process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 编译成功的信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build complete.\n'</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">      <span class="string">'  Tip: built files are meant to be served over an HTTP server.\n'</span> +</span><br><span class="line">      <span class="string">'  Opening index.html over file:// won\'t work.\n'</span></span><br><span class="line">    ))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2check-versions-js文件"><a href="#2check-versions-js文件" class="headerlink" title="2check-versions.js文件"></a>2check-versions.js文件</h2><p>node和npm的版本检查</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span> <span class="comment">// js的严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导进各模块</span></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>)</span><br><span class="line"><span class="keyword">const</span> packageConfig = <span class="built_in">require</span>(<span class="string">'../package.json'</span>)</span><br><span class="line"><span class="keyword">const</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>) <span class="comment">// shell.js插件，执行unix系统命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exec</span> (<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 脚本可以通过child_process模块新建子进程，从而执行Unix系统命令</span></span><br><span class="line">   <span class="comment">// 将cmd参数传递的值转换成前后没有空格的字符串，也就是版本号</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'child_process'</span>).execSync(cmd).toString().trim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明常量数组，数组内容为有关node相关信息的对象</span></span><br><span class="line"><span class="keyword">const</span> versionRequirements = [</span><br><span class="line"> &#123;</span><br><span class="line">   name: <span class="string">'node'</span>,                                   <span class="comment">//对象名称为node</span></span><br><span class="line">   currentVersion: semver.clean(process.version),  <span class="comment">//使用semver插件，把版本信息转换成规定格式</span></span><br><span class="line">   versionRequirement: packageConfig.engines.node  <span class="comment">//规定package.json中engines选项的node版本信息</span></span><br><span class="line"> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shell.which(<span class="string">'npm'</span>)) &#123;                       <span class="comment">//which为linux指令，在$path规定的路径下查找符合条件的文件</span></span><br><span class="line"> versionRequirements.push(&#123;</span><br><span class="line">   name: <span class="string">'npm'</span>,                                </span><br><span class="line">   currentVersion: exec(<span class="string">'npm --version'</span>),        <span class="comment">//调用npm --version命令，并且把参数返回给exec函数获取纯净版本</span></span><br><span class="line">   versionRequirement: packageConfig.engines.npm <span class="comment">//规定package.json中engines选项的node版本信息</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> warnings = []</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; versionRequirements.length; i++) &#123;</span><br><span class="line">   <span class="keyword">const</span> mod = versionRequirements[i]</span><br><span class="line">   <span class="comment">// 如果版本号不符合package.json文件中指定的版本号，就执行warning.push...</span></span><br><span class="line">   <span class="comment">// 当前版本号用红色标识，要求版本号用绿色标识</span></span><br><span class="line">   <span class="keyword">if</span> (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class="line">     warnings.push(mod.name + <span class="string">': '</span> +</span><br><span class="line">       chalk.red(mod.currentVersion) + <span class="string">' should be '</span> +</span><br><span class="line">       chalk.green(mod.versionRequirement)</span><br><span class="line">     )</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//如果为真，则打印提示用户升级新版本</span></span><br><span class="line"> <span class="keyword">if</span> (warnings.length) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">''</span>)</span><br><span class="line">   <span class="built_in">console</span>.log(chalk.yellow(<span class="string">'To use this template, you must update following to modules:'</span>))</span><br><span class="line">   <span class="built_in">console</span>.log()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; warnings.length; i++) &#123;</span><br><span class="line">     <span class="keyword">const</span> warning = warnings[i]</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'  '</span> + warning)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log()</span><br><span class="line">   process.exit(<span class="number">1</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-utils-js文件"><a href="#3-utils-js文件" class="headerlink" title="3:utils.js文件"></a>3:utils.js文件</h2><p>配置静态资源路径；<br>生成cssLoaders用于加载.vue文件中的样式；<br>生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)             <span class="comment">// 引入config下的index.js文件</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>) <span class="comment">// 一个插件，抽离css样式，防止将样式打包在js中引起样式加载错乱</span></span><br><span class="line"><span class="keyword">const</span> packageConfig = <span class="built_in">require</span>(<span class="string">'../package.json'</span>)</span><br><span class="line"><span class="keyword">const</span> packageConfig = <span class="built_in">require</span>(<span class="string">'../package.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出assetsPath</span></span><br><span class="line">exports.assetsPath = <span class="function"><span class="keyword">function</span> (<span class="params">_path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> assetsSubDirectory = process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line">    ? config.build.assetsSubDirectory</span><br><span class="line">    : config.dev.assetsSubDirectory</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> path.posix.join(assetsSubDirectory, _path) <span class="comment">// path.join返回绝对路径（在电脑上的实际位置）；path.posix.join返回相对路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> postcssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// generate loader string to be used with extract text plugin</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span> (<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loader) &#123;</span><br><span class="line">      loaders.push(&#123;</span><br><span class="line">        loader: loader + <span class="string">'-loader'</span>,</span><br><span class="line">        options: <span class="built_in">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">          sourceMap: options.sourceMap</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Extract CSS when that option is specified</span></span><br><span class="line">    <span class="comment">// (which is the case during production build)</span></span><br><span class="line">    <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        publicPath:<span class="string">'../../'</span>,</span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// https://vue-loader.vuejs.org/en/configurations/extract-css.html</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    less: generateLoaders(<span class="string">'less'</span>),</span><br><span class="line">    sass: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    scss: generateLoaders(<span class="string">'sass'</span>),</span><br><span class="line">    stylus: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">    styl: generateLoaders(<span class="string">'stylus'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate loaders for standalone style files (outside of .vue)</span></span><br><span class="line">exports.styleLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> output = []</span><br><span class="line">  <span class="keyword">const</span> loaders = exports.cssLoaders(options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> extension <span class="keyword">in</span> loaders) &#123;</span><br><span class="line">    <span class="keyword">const</span> loader = loaders[extension]</span><br><span class="line">    output.push(&#123;</span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.'</span> + extension + <span class="string">'$'</span>),</span><br><span class="line">      use: loader</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.createNotifierCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> notifier = <span class="built_in">require</span>(<span class="string">'node-notifier'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">severity, errors</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (severity !== <span class="string">'error'</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> error = errors[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> filename = error.file &amp;&amp; error.file.split(<span class="string">'!'</span>).pop()</span><br><span class="line"></span><br><span class="line">    notifier.notify(&#123;</span><br><span class="line">      title: packageConfig.name,</span><br><span class="line">      message: severity + <span class="string">': '</span> + error.name,</span><br><span class="line">      subtitle: filename || <span class="string">''</span>,</span><br><span class="line">      icon: path.join(__dirname, <span class="string">'logo.png'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-vue-loader-conf-js文件"><a href="#4-vue-loader-conf-js文件" class="headerlink" title="4:vue-loader.conf.js文件"></a>4:vue-loader.conf.js文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">'production'</span> <span class="comment">// 是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> sourceMapEnabled = isProduction</span><br><span class="line">  ? config.build.productionSourceMap</span><br><span class="line">  : config.dev.cssSourceMap</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loaders: utils.cssLoaders(&#123;   <span class="comment">// 载入utils中的cssloaders返回配置好的css-loader和vue-style=loader</span></span><br><span class="line">    sourceMap: sourceMapEnabled,</span><br><span class="line">    extract: isProduction</span><br><span class="line">  &#125;),</span><br><span class="line">  cssSourceMap: sourceMapEnabled, <span class="comment">// 是否开启css资源map</span></span><br><span class="line">  cacheBusting: config.dev.cacheBusting, <span class="comment">// 是否开启cacheBusting</span></span><br><span class="line">  transformToRequire: &#123;</span><br><span class="line">    video: [<span class="string">'src'</span>, <span class="string">'poster'</span>],</span><br><span class="line">    source: <span class="string">'src'</span>,</span><br><span class="line">    img: <span class="string">'src'</span>,</span><br><span class="line">    image: <span class="string">'xlink:href'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-webpack-base-conf-js文件"><a href="#5-webpack-base-conf-js文件" class="headerlink" title="5:webpack.base.conf.js文件"></a>5:webpack.base.conf.js文件</h2><p>​       基本的webpack配置<br>  配置webpack编译入口<br>  配置webpack输出路径和命名规则<br>  配置模块resolve规则<br>  配置不同类型模块的处理规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> vuxLoader = <span class="built_in">require</span>(<span class="string">'vux-loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> webpackConfig = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  externals:&#123;</span><br><span class="line">    <span class="string">'BMap'</span>:<span class="string">'BMap'</span>,</span><br><span class="line">    <span class="string">'BMap_Symbol_SHAPE_POINT'</span>: <span class="string">'BMap_Symbol_SHAPE_POINT'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot, <span class="comment">// 打包后文件输出路径，config/index.js中build.assetsRoot</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// 输出文件名称默认使用原名</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span> <span class="comment">// 文件引用路径</span></span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>], <span class="comment">// 省略扩展名，也就是说当使用.js .vue .json文件导入可以省略后缀名</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>, <span class="comment">// $符号指精确匹配，路径和文件名要详细</span></span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>), <span class="comment">// resolve('src') 指的是项目根目录中的src文件夹目录，使用@符号代替</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 用于解析不同的模块</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>, <span class="comment">// 解析.vue文件</span></span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>, <span class="comment">// 对js文件使用babel-loader转码，用于解析es6等代码</span></span><br><span class="line">        include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>), resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)] <span class="comment">// 指明那些文件夹下的js文件需要使用该loader</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>, <span class="comment">// 使用url-loader插件，将图片转为base64格式字符串</span></span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>, <span class="comment">// 10000个字节以下的文件才用来转为dataUrl</span></span><br><span class="line">          name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>) <span class="comment">//超过10000字节的图片，就按照制定规则设置生成的图片名称，可以看到用了7位hash码来标记，.ext文件是一种索引式文件系统</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">    <span class="comment">// prevent webpack from injecting useless setImmediate polyfill because Vue</span></span><br><span class="line">    <span class="comment">// source contains it (although only uses it if it's native).</span></span><br><span class="line">    setImmediate: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// prevent webpack from injecting mocks to Node native modules</span></span><br><span class="line">    <span class="comment">// that does not make sense for the client</span></span><br><span class="line">    dgram: <span class="string">'empty'</span>,</span><br><span class="line">    fs: <span class="string">'empty'</span>,</span><br><span class="line">    net: <span class="string">'empty'</span>,</span><br><span class="line">    tls: <span class="string">'empty'</span>,</span><br><span class="line">    child_process: <span class="string">'empty'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = vuxLoader.merge(webpackConfig,&#123;</span><br><span class="line">  plugins:[<span class="string">'vux-ui'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-webpack-dev-conf-js文件"><a href="#6-webpack-dev-conf-js文件" class="headerlink" title="6:webpack.dev.conf.js文件"></a>6:webpack.dev.conf.js文件</h2><p>开发环境配置<br>  在base.conf基础进一步完善<br>  将hot-reload相关的代码添加到entry chunks<br>  使用styleLoaders<br>  配置Source Maps<br>  配置webpack插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>) <span class="comment">// 一个用于生成HTML文件并自动注入依赖文件（link/script）的webpack插件</span></span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>) <span class="comment">// 用于更友好地输出webpack的警告、错误等信息</span></span><br><span class="line"><span class="comment">// 获取port</span></span><br><span class="line"><span class="keyword">const</span> portfinder = <span class="built_in">require</span>(<span class="string">'portfinder'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOST = process.env.HOST</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT &amp;&amp; <span class="built_in">Number</span>(process.env.PORT)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    合并基础的webpack配置</span></span><br><span class="line"><span class="comment">        第一个参数baseWebpackConfig,是webpack基本配置文件webpack.base.conf.js中的配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap, <span class="attr">usePostCSS</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cheap-module-eval-source-map is faster for development</span></span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// these devServer options should be customized in /config/index.js</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: <span class="string">'warning'</span>,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [</span><br><span class="line">        &#123; <span class="attr">from</span>: <span class="regexp">/.*/</span>, <span class="attr">to</span>: path.posix.join(config.dev.assetsPublicPath, <span class="string">'index.html'</span>) &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 是否启用webpack的模块热替换特性。主要是用于开发过程中</span></span><br><span class="line">    contentBase: <span class="literal">false</span>, <span class="comment">// since we use CopyWebpackPlugin.</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 一切服务是否都启用gzip压缩</span></span><br><span class="line">    host: HOST || config.dev.host, <span class="comment">// 指定一个host,默认是localhost。如果有全局host就用全局，否则就用index.js中的设置。</span></span><br><span class="line">    port: PORT || config.dev.port, <span class="comment">// 指定端口</span></span><br><span class="line">    open: config.dev.autoOpenBrowser, <span class="comment">// 是否在浏览器开启本dev server</span></span><br><span class="line">    overlay: config.dev.errorOverlay <span class="comment">// 当有编译器错误时，是否在浏览器中显示全屏覆盖</span></span><br><span class="line">      ? &#123; <span class="attr">warnings</span>: <span class="literal">false</span>, <span class="attr">errors</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="literal">false</span>,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable, <span class="comment">// 代理：如果你有单独的后端开发服务器api,并且希望在同域名下发送api请求，那么代理某些URL会很有用</span></span><br><span class="line">    quiet: <span class="literal">true</span>, <span class="comment">// necessary for FriendlyErrorsPlugin</span></span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll, <span class="comment">// 是否使用轮询</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: <span class="built_in">require</span>(<span class="string">'../config/dev.env'</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(), <span class="comment">// HMR shows correct file names in console on update.</span></span><br><span class="line">    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">    <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">      template: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// copy custom static assets</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        to: config.dev.assetsSubDirectory,</span><br><span class="line">        ignore: [<span class="string">'.*'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort(<span class="function">(<span class="params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// publish the new Port, necessary for e2e tests</span></span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      <span class="comment">// add port to devServer config</span></span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add FriendlyErrorsPlugin</span></span><br><span class="line">      devWebpackConfig.plugins.push(<span class="keyword">new</span> FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [<span class="string">`Your application is running here: http://<span class="subst">$&#123;devWebpackConfig.devServer.host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="7-webpack-prod-conf-js文件"><a href="#7-webpack-prod-conf-js文件" class="headerlink" title="7:webpack.prod.conf.js文件"></a>7:webpack.prod.conf.js文件</h2><p>生产环境配置<br>  在base.conf基础进一步完善<br>  合并基础webpack配置<br>  使用styleLoaders<br>  配置webpack输出<br>  配置webpack插件<br>  gzip模式下的webpack插件配置<br>  webpack-bundle分析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV === <span class="string">'testing'</span></span><br><span class="line">  ? <span class="built_in">require</span>(<span class="string">'../config/test.env'</span>)</span><br><span class="line">  : <span class="built_in">require</span>(<span class="string">'../config/prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并基础的webpack配置</span></span><br><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123;</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      extract: <span class="literal">true</span>,</span><br><span class="line">      usePostCSS: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: config.build.productionSourceMap ? config.build.devtool : <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 配置webpack输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot, <span class="comment">// 编译输出目录</span></span><br><span class="line">    filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>), <span class="comment">// 编译输出文件名格式</span></span><br><span class="line">    chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>) <span class="comment">// 没有指定输出名的文件输出的文件名格式</span></span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="comment">// 配置webpack插件</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: env</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      parallel: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// extract css into its own file</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>),</span><br><span class="line">      <span class="comment">// Setting the following option to `false` will not extract CSS from codesplit chunks.</span></span><br><span class="line">      <span class="comment">// Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.</span></span><br><span class="line">      <span class="comment">// It's currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it's `false`, </span></span><br><span class="line">      <span class="comment">// increasing file size: https://github.com/vuejs-templates/webpack/issues/1110</span></span><br><span class="line">      allChunks: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class="line">    <span class="comment">// duplicated CSS from different components can be deduped.</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">      cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">        ? &#123; <span class="attr">safe</span>: <span class="literal">true</span>, <span class="attr">map</span>: &#123; <span class="attr">inline</span>: <span class="literal">false</span> &#125; &#125;</span><br><span class="line">        : &#123; <span class="attr">safe</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// generate dist index.html with correct asset hash for caching.</span></span><br><span class="line">    <span class="comment">// you can customize output by editing /index.html</span></span><br><span class="line">    <span class="comment">// see https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: process.env.NODE_ENV === <span class="string">'testing'</span></span><br><span class="line">        ? <span class="string">'index.html'</span></span><br><span class="line">        : config.build.index,</span><br><span class="line">      template: <span class="string">'index.html'</span>,</span><br><span class="line">      inject: <span class="literal">true</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">        <span class="comment">// more options:</span></span><br><span class="line">        <span class="comment">// https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></span><br><span class="line">      chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// keep module.id stable when vendor modules does not change</span></span><br><span class="line">    <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class="line">    <span class="comment">// enable scope hoisting</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="comment">// split vendor js into its own file</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendor'</span>,</span><br><span class="line">      minChunks (<span class="built_in">module</span>) &#123;</span><br><span class="line">        <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">          /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">          <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">            path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">          ) === <span class="number">0</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">    <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class="line">    <span class="comment">// in a separate chunk, similar to the vendor chunk</span></span><br><span class="line">    <span class="comment">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'app'</span>,</span><br><span class="line">      <span class="keyword">async</span>: <span class="string">'vendor-async'</span>,</span><br><span class="line">      children: <span class="literal">true</span>,</span><br><span class="line">      minChunks: <span class="number">3</span></span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy custom static assets</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">        to: config.build.assetsSubDirectory,</span><br><span class="line">        ignore: [<span class="string">'.*'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (config.build.productionGzip) &#123;</span><br><span class="line">  <span class="keyword">const</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">      algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">        <span class="string">'\\.('</span> +</span><br><span class="line">        config.build.productionGzipExtensions.join(<span class="string">'|'</span>) +</span><br><span class="line">        <span class="string">')$'</span></span><br><span class="line">      ),</span><br><span class="line">      threshold: <span class="number">10240</span>,</span><br><span class="line">      minRatio: <span class="number">0.8</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">  <span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class="line">  webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue项目结构及文件介绍——-build文件夹&quot;&gt;&lt;a href=&quot;#vue项目结构及文件介绍——-build文件夹&quot; class=&quot;headerlink&quot; title=&quot;vue项目结构及文件介绍—— build文件夹&quot;&gt;&lt;/a&gt;vue项目结构及文件介绍—— build文件夹&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/4/19/16a3348f0434256c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;build 文件夹，用来存放项目构建脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;config 中存放项目的一些基本配置信息，最常用的就是端口转发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node_modules 这个目录存放的是项目的所有依赖，即 npm install 命令下载下来的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;src 这个目录下存放项目的源码，即开发者写的代码放在这里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;static 用来存放静态资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;index.html 则是项目的首页，入口页，也是整个项目唯一的HTML页面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package.json 中定义了项目的所有依赖，包括开发时依赖和发布时依赖&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>1nrm</title>
    <link href="http://yoursite.com/2020/03/06/1nrm/"/>
    <id>http://yoursite.com/2020/03/06/1nrm/</id>
    <published>2020-03-06T09:13:14.000Z</published>
    <updated>2020-03-06T09:21:43.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1:安装"></a>1:安装</h1><p>在cmd中，npm install  nrm -g 进行去全局安装</p><p>nrm 只是提供了一一些常用的npm包镜像地址，能够让我们安装包的时候切换服务器地址</p><p>下载安装包的还是npm安装包</p><p>切换服务器地址：</p><p>nrm use taobao</p><p>npm i cnpm -g   此时的cnpm是一个下载工具</p><p><img src="C:%5CUsers%5Cgy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213155512290.png" alt="image-20200213155512290"></p><p>而：图片中的cnpm是一个镜像地址。</p><p>两者是不同的，cnpm安装工具是需要通过npm i cnpm -g 命令安装使用的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1:安装&quot;&gt;&lt;/a&gt;1:安装&lt;/h1&gt;&lt;p&gt;在cmd中，npm install  nrm -g 进行去全局安装&lt;/p&gt;
&lt;p&gt;nrm 只是提供了一一些常用的npm包镜像
      
    
    </summary>
    
    
      <category term="webpack基础" scheme="http://yoursite.com/categories/webpack%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>1指令</title>
    <link href="http://yoursite.com/2020/03/06/1%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/03/06/1%E6%8C%87%E4%BB%A4/</id>
    <published>2020-03-06T07:45:59.000Z</published>
    <updated>2020-03-06T09:06:22.784Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、-vue-的指令"><a href="#一、-vue-的指令" class="headerlink" title="一、 vue 的指令"></a>一、 vue 的指令</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v-model   数据绑定</span><br><span class="line">data  返回对象用 <span class="keyword">return</span></span><br><span class="line">v-<span class="keyword">for</span>   循环   格式  v-<span class="keyword">for</span>=<span class="string">"字段名 in(of) 数组json"</span></span><br><span class="line">v-show   显示 隐藏     传递的值为布尔值  <span class="keyword">true</span>  <span class="keyword">false</span>  默认为<span class="keyword">false</span></span><br><span class="line">v-<span class="keyword">if</span>   显示与隐藏     和v-show对比的区别 就是是否删除dom节点   默认值为<span class="keyword">false</span></span><br><span class="line">v-<span class="keyword">else</span>-<span class="keyword">if</span>  必须和v-<span class="keyword">if</span>连用</span><br><span class="line">v-<span class="keyword">else</span>  必须和v-<span class="keyword">if</span>连用  不能单独使用  否则报错   模板编译错误</span><br><span class="line">v-bind  动态绑定  作用： 及时对页面的数据进行更改</span><br><span class="line">v-on 绑定事件  函数必须写在methods里面</span><br><span class="line"> @click  快捷方法</span><br><span class="line">v-text  解析文本</span><br><span class="line">v-html   解析html标签</span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span>   三种绑定方法  1、对象型  '</span>&#123;red:isred&#125;<span class="string">'  2、三目型   '</span>isred?<span class="string">"red"</span>:<span class="string">"blue"</span><span class="string">'   3、数组型  '</span>[&#123;red:<span class="string">"isred"</span>&#125;,&#123;blue:<span class="string">"isblue"</span>&#125;]<span class="string">'</span></span><br><span class="line"><span class="string">v-once  进入页面时  只渲染一次 不在进行渲染</span></span><br><span class="line"><span class="string">v-cloak  防止闪烁</span></span><br><span class="line"><span class="string">v-pre  把标签内部的元素原位输出</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二、用法"><a href="#二、用法" class="headerlink" title="二、用法"></a>二、用法</h3><h4 id="1-v-text"><a href="#1-v-text" class="headerlink" title="1. v-text"></a>1. v-text</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v-text主要用来更新textContent，可以等同于JS的text属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这两者等价：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-v-html"><a href="#2-v-html" class="headerlink" title="2. v-html"></a>2. v-html</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令。它等同于JS的innerHtml属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">这个div的内容将会替换成属性值rawHtml，直接作为HTML进行渲染。</span><br></pre></td></tr></table></figure><h4 id="3-v-pre"><a href="#3-v-pre" class="headerlink" title="3. v-pre"></a>3. v-pre</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-pre主要用来跳过这个元素和它的子元素编译过程。可以用来显示原始的Mustache标签。跳过大量没有指令的节点加快编译。</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;span v-pre&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/span&gt;  /</span><span class="regexp">/这条语句不进行编译</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">最终仅显示第二个span的内容</span></span><br></pre></td></tr></table></figure><h4 id="4-v-cloak"><a href="#4-v-cloak" class="headerlink" title="4. v-cloak"></a>4. v-cloak</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">这个指令是用来保持在元素上直到关联实例结束时进行编译。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        message:<span class="string">'hello world'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">在页面加载时会闪烁，先显示:</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">然后才会编译为：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    hello world!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-v-once"><a href="#5-v-once" class="headerlink" title="5. v-once"></a>5. v-once</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v-once关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change:&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  //单个元素</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>//有子元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once:comment</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span>  //组件</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"i in list"</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">上面的例子中，msg,list即使产生改变，也不会重新渲染。</span><br></pre></td></tr></table></figure><h4 id="6-v-if"><a href="#6-v-if" class="headerlink" title="6. v-if"></a>6. v-if</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">如果属性值ok为true，则显示。否则，不会渲染这个元素。</span><br></pre></td></tr></table></figure><h4 id="7-v-else"><a href="#7-v-else" class="headerlink" title="7. v-else"></a>7. v-else</h4><!--more--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面，否则不起作用。</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-v-else-if"><a href="#8-v-else-if" class="headerlink" title="8. v-else-if"></a>8. v-else-if</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v-else-if充当v-if的else-if块，可以链式的使用多次。可以更加方便的实现switch语句。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span></span><br><span class="line">    A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='B'"</span>&gt;</span></span><br><span class="line">    B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type==='C'"</span>&gt;</span></span><br><span class="line">    C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Not A,B,C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-v-show"><a href="#9-v-show" class="headerlink" title="9. v-show"></a>9. v-show</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-<span class="keyword">show</span>=<span class="string">"ok"</span>&gt;hello world&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">也是用于根据条件展示元素。和v-<span class="keyword">if</span>不同的是，如果v-<span class="keyword">if</span>的值是<span class="keyword">false</span>，则这个元素被销毁，不在dom中。但是v-<span class="keyword">show</span>的元素会始终被渲染并保存在dom中，它只是简单的切换css的dispaly属性。</span><br><span class="line"></span><br><span class="line">注意：v-<span class="keyword">if</span>有更高的切换开销</span><br><span class="line">v-<span class="keyword">show</span>有更高的初始渲染开销。</span><br><span class="line">因此，如果要非常频繁的切换，则使用v-<span class="keyword">show</span>较好；如果在运行时条件不太可能改变，则v-<span class="keyword">if</span>较好</span><br></pre></td></tr></table></figure><h4 id="10-v-for"><a href="#10-v-for" class="headerlink" title="10. v-for"></a>10. v-for</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用v-for指令根据遍历数组来进行渲染</span><br><span class="line">有下面两种遍历形式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   //使用in，index是一个可选参数，表示当前项的索引</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item of items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   //使用of</span><br><span class="line"></span><br><span class="line">下面是一个例子，并且在v-for中，拥有对父作用域属性的完全访问权限。</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">        &#123;&#123;parent&#125;&#125;-&#123;&#123;item.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> example = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line">      data:&#123;</span><br><span class="line"><span class="actionscript">        parent:<span class="string">'父作用域'</span></span></span><br><span class="line">        items:[</span><br><span class="line"><span class="actionscript">          &#123;text:<span class="string">'文本1'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">          &#123;text:<span class="string">'文本2'</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">会被渲染为：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>父作用域-文本1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>父作用域-文本2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">注意：当v-for和v-if同处于一个节点时，v-for的优先级比v-if更高。这意味着v-if将运行在每个v-for循环中</span><br></pre></td></tr></table></figure><h4 id="11-v-bind"><a href="#11-v-bind" class="headerlink" title="11. v-bind"></a>11. v-bind</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">v-bind用来动态的绑定一个或者多个特性。没有参数时，可以绑定到一个包含键值对的对象。常用于动态绑定class和style。以及href等。</span><br><span class="line">简写为一个冒号【  ：】</span><br><span class="line"><span class="tag">&lt;<span class="name">1</span>&gt;</span>对象语法：</span><br><span class="line">//进行类切换的例子</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当data里面定义的isActive等于true时，is-active这个类才会被添加起作用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当data里面定义的hasError等于true时，text-danger这个类才会被添加起作用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'is-active':isActive, 'text-danger':hasError&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            isActive: <span class="literal">true</span>,  </span></span><br><span class="line"><span class="actionscript">            hasError: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为hasError: false，所以text-danger不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"is-active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">2</span>&gt;</span>数组语法</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组语法：errorClass在data对应的类一定会添加--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--is-active是对象语法，根据activeClass对应的取值决定是否添加--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[&#123;'is-active':activeClass&#125;,errorClass]"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            activeClass: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            errorClass: <span class="string">'text-danger'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为activeClass: false，所以is-active不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">3</span>&gt;</span>直接绑定数据对象</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在vue实例的data中定义了classObject对象，这个对象里面是所有类名及其真值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当里面的类的值是true时会被渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"classObject"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            classObject:&#123;</span><br><span class="line"><span class="actionscript">                <span class="string">'is-active'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">'text-danger'</span>:<span class="literal">true</span></span></span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">渲染结果：</span><br><span class="line"><span class="comment">&lt;!--因为'is-active': false，所以is-active不被渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-v-model"><a href="#12-v-model" class="headerlink" title="12. v-model"></a>12. v-model</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">这个指令用于在表单上创建双向数据绑定。</span><br><span class="line">v-model会忽略所有表单元素的value、checked、selected特性的初始值。因为它选择Vue实例数据做为具体的值。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"somebody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello &#123;&#123;somebody&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            somebody:<span class="string">'小明'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这个例子中直接在浏览器input中输入别的名字，下面的p的内容会直接跟着变。这就是双向数据绑定。</span><br><span class="line">v-model修饰符</span><br><span class="line"><span class="tag">&lt;<span class="name">1</span>&gt;</span>  .lazy</span><br><span class="line">默认情况下，v-model同步输入框的值和数据。可以通过这个修饰符，转变为在change事件再同步。</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">2</span>&gt;</span>  .number</span><br><span class="line">自动将用户的输入值转化为数值类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">3</span>&gt;</span>  .trim</span><br><span class="line">自动过滤用户输入的首尾空格</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="13-v-on"><a href="#13-v-on" class="headerlink" title="13. v-on"></a>13. v-on</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">v-on主要用来监听dom事件，以便执行一些代码块。表达式可以是一个方法名。</span><br><span class="line">简写为：【  @  】</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"consoleLog"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">            consoleLog:<span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">事件修饰符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.stop  阻止事件继续传播</span><br><span class="line"></span><br><span class="line">.prevent 事件不再重载页面</span><br><span class="line"></span><br><span class="line">.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</span><br><span class="line"></span><br><span class="line">.self 只当在 event.target 是当前元素自身时触发处理函数</span><br><span class="line"></span><br><span class="line">.once 事件将只会触发一次</span><br><span class="line"></span><br><span class="line">.passive 告诉浏览器你不想阻止事件的默认行为</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用v-on:click.prevent.self会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、-vue-的指令&quot;&gt;&lt;a href=&quot;#一、-vue-的指令&quot; class=&quot;headerlink&quot; title=&quot;一、 vue 的指令&quot;&gt;&lt;/a&gt;一、 vue 的指令&lt;/h5&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v-model   数据绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data  返回对象用 &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;   循环   格式  v-&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;字段名 in(of) 数组json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-show   显示 隐藏     传递的值为布尔值  &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;  默认为&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;   显示与隐藏     和v-show对比的区别 就是是否删除dom节点   默认值为&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;  必须和v-&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;连用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  必须和v-&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;连用  不能单独使用  否则报错   模板编译错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-bind  动态绑定  作用： 及时对页面的数据进行更改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-on 绑定事件  函数必须写在methods里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @click  快捷方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-text  解析文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-html   解析html标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;v-bind:&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;   三种绑定方法  1、对象型  &#39;&lt;/span&gt;&amp;#123;red:isred&amp;#125;&lt;span class=&quot;string&quot;&gt;&#39;  2、三目型   &#39;&lt;/span&gt;isred?&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;   3、数组型  &#39;&lt;/span&gt;[&amp;#123;red:&lt;span class=&quot;string&quot;&gt;&quot;isred&quot;&lt;/span&gt;&amp;#125;,&amp;#123;blue:&lt;span class=&quot;string&quot;&gt;&quot;isblue&quot;&lt;/span&gt;&amp;#125;]&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;v-once  进入页面时  只渲染一次 不在进行渲染&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;v-cloak  防止闪烁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;v-pre  把标签内部的元素原位输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>3vue组件</title>
    <link href="http://yoursite.com/2020/03/06/3vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/06/3vue%E7%BB%84%E4%BB%B6/</id>
    <published>2020-03-06T07:45:57.000Z</published>
    <updated>2020-03-06T07:56:41.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1：创建组件的方式"><a href="#1：创建组件的方式" class="headerlink" title="1：创建组件的方式"></a>1：创建组件的方式</h1><p>  我们强烈推荐遵循 <a href="https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name" target="_blank" rel="noopener">W3C 规范</a>中的自定义组件名 (字母全小写且必须包含一个连字符)。这会帮助你避免和当前以及未来的 HTML 元素相冲突。</p><h2 id="1：创建一个全局的Vue组件"><a href="#1：创建一个全局的Vue组件" class="headerlink" title="1：创建一个全局的Vue组件"></a>1：<strong>创建一个全局的Vue组件</strong></h2><p>​                     </p><p>​      <strong>1:通过Vue.extend方法**</strong>，接收一个返回值 是创建出来的组件模板对象，**里面传一个对象</p><p>通过 template 属性，把组件的结构写进去</p><p>​      2:Vue.component(“组件名称-驼峰命名规则”)</p><p>注调用组件的时候，要全部写成小写，中间的驼峰的地方要用“-”连接</p><a id="more"></a><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\8c4d0bb916bf41f2846edee0764889f2\clipboard.png)</p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\db4994e75a3243eb8b5514c86d2e7170\clipboard.png)</p><p><strong>将两个步骤合并成了一步</strong>：</p><p>写法如下：</p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\0232ea188f4b411baaacfebd891c07c9\clipboard.png)</p><h2 id="2：创建的第二种方式：写法更简便"><a href="#2：创建的第二种方式：写法更简便" class="headerlink" title="2：创建的第二种方式：写法更简便"></a>2：创建的第二种方式：写法更简便</h2><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\b2d003d8369e414dbf817ea1846e0d3d\clipboard.png)</p><h2 id="3-创建的第3种方式：结构更好一点"><a href="#3-创建的第3种方式：结构更好一点" class="headerlink" title="3:创建的第3种方式：结构更好一点"></a>3:创建的第3种方式：结构更好一点</h2><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\4bb97d01973f474ab2fb8c0bc4565b88\clipboard.png)</p><h2 id="4：所有的参数"><a href="#4：所有的参数" class="headerlink" title="4：所有的参数"></a><strong>4：所有的参数</strong></h2><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\b274ed9ca4da4ab9a30fddbf99cd3811\clipboard.png)</p><h1 id="2：定义私有组件："><a href="#2：定义私有组件：" class="headerlink" title="2：定义私有组件："></a><strong>2：定义私有组件：</strong></h1><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\dec61fa33ebe47f28ab37795097ccf50\clipboard.png)</p><h1 id="3：组件中的data对象"><a href="#3：组件中的data对象" class="headerlink" title="3：组件中的data对象"></a><strong>3：组件中的data对象</strong></h1><p><strong>必须是一个函数，并且需要返回一个对象。</strong></p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\5cbe9b8b59e14f8b9d4a8708af2bd5cd\clipboard.png)</p><h1 id="4：组件的稍微的使用"><a href="#4：组件的稍微的使用" class="headerlink" title="4：组件的稍微的使用"></a>4：组件的稍微的使用</h1><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\0864d4626b39411dab59d222b88b0b96\clipboard.png)</p><h1 id="5：登陆注册组件的切换"><a href="#5：登陆注册组件的切换" class="headerlink" title="5：登陆注册组件的切换"></a><strong>5：登陆注册组件的切换</strong></h1><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\9164d642188f43a69d4d037941830722\clipboard.png)</p><p><strong>登陆注册组件的切换2</strong></p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\f11d2ae6bc1f45d381ad6f458f780f3f\clipboard.png)</p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\bced782b61af44f9816c64c24eeb5ad2\clipboard.png)</p><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\5927a7fe8b8e4c31b70f8d7ca38fc76e\clipboard.png)</p><h1 id="6：动画"><a href="#6：动画" class="headerlink" title="6：动画"></a>6：动画</h1><h1 id="通过transition-标签的mode属性，切换组件的动画切换方式，out-in-代表先出去再进来"><a href="#通过transition-标签的mode属性，切换组件的动画切换方式，out-in-代表先出去再进来" class="headerlink" title="通过transition 标签的mode属性，切换组件的动画切换方式，out-in 代表先出去再进来**"></a>通过transition 标签的mode属性，切换组件的动画切换方式，out-in 代表先出去再进来**</h1><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\70e5e52a21144be49c915b56e686e9f6\clipboard.png)</p><h1 id="7：flag标识符的作用"><a href="#7：flag标识符的作用" class="headerlink" title="7：flag标识符的作用**"></a>7：flag标识符的作用**</h1><p>![img](D:\Program Files (x86)\有道云笔记\slive21@163.com\03a7fe44d3544364b8e0b5139f257142\clipboard.png)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1：创建组件的方式&quot;&gt;&lt;a href=&quot;#1：创建组件的方式&quot; class=&quot;headerlink&quot; title=&quot;1：创建组件的方式&quot;&gt;&lt;/a&gt;1：创建组件的方式&lt;/h1&gt;&lt;p&gt;  我们强烈推荐遵循 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3C 规范&lt;/a&gt;中的自定义组件名 (字母全小写且必须包含一个连字符)。这会帮助你避免和当前以及未来的 HTML 元素相冲突。&lt;/p&gt;
&lt;h2 id=&quot;1：创建一个全局的Vue组件&quot;&gt;&lt;a href=&quot;#1：创建一个全局的Vue组件&quot; class=&quot;headerlink&quot; title=&quot;1：创建一个全局的Vue组件&quot;&gt;&lt;/a&gt;1：&lt;strong&gt;创建一个全局的Vue组件&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​                     &lt;/p&gt;
&lt;p&gt;​      &lt;strong&gt;1:通过Vue.extend方法**&lt;/strong&gt;，接收一个返回值 是创建出来的组件模板对象，**里面传一个对象&lt;/p&gt;
&lt;p&gt;通过 template 属性，把组件的结构写进去&lt;/p&gt;
&lt;p&gt;​      2:Vue.component(“组件名称-驼峰命名规则”)&lt;/p&gt;
&lt;p&gt;注调用组件的时候，要全部写成小写，中间的驼峰的地方要用“-”连接&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>5子组件</title>
    <link href="http://yoursite.com/2020/03/06/5%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/06/5%E5%AD%90%E7%BB%84%E4%BB%B6/</id>
    <published>2020-03-06T07:45:57.000Z</published>
    <updated>2020-03-06T08:57:11.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-创建子组件"><a href="#1-创建子组件" class="headerlink" title="1:创建子组件"></a>1:创建子组件</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 此例子是 子组件中的 想要访问父组件中的数据，但是访问不到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">temp</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件--- &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#son'</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">'父组件的数据123'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-子组件访问父组件的数据"><a href="#2-子组件访问父组件的数据" class="headerlink" title="2:子组件访问父组件的数据"></a>2:子组件访问父组件的数据</h1><p>1：通过 props 在子组件身上注册了一个 属性，该属性的属性名是 fathermsg1</p><p>​     2： 通过 v-bind指令 将父组件的 值 绑定在刚刚注册的属性身上 v-bind:fathermsg1=”msg”</p><p>​     3：通过插值表达式 在子组件中就可以访问到父组件的数据了子组件通过属性名就可以访问到了</p><p>  4：子组件中props的数据都是通过父组件传递过来的，无法修改或者重写。如果要修改建议写在data中</p><p>5：子组件的data(){}里 的数据可读可写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">temp</span> <span class="attr">v-bind:fathermsg</span>=<span class="string">'msg'</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件--- &#123;&#123;fathermsg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#son'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'fathermsg'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">'父组件的数据123'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-子组件调用父组件的方法"><a href="#3-子组件调用父组件的方法" class="headerlink" title="3:子组件调用父组件的方法"></a>3:子组件调用父组件的方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件通过 事件绑定，可以让子组件访问到父组件的方法 接而调用  show  是方法的引用，</span></span><br><span class="line"><span class="comment">  点击</span></span><br><span class="line"><span class="comment">   触发子组件中的方法</span></span><br><span class="line"><span class="comment">   $emit('func')  中的参数是方法名</span></span><br><span class="line"><span class="comment">   $emit('func',第二个参数,第三个参数，。。。)</span></span><br><span class="line"><span class="comment">   $emit()方法中的参数是 父组件中传过来的方法的参数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">temp</span> @<span class="attr">func</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"myClick"</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#son'</span>,</span></span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">        myClick() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        show() &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'这是父组件的一个方法'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-子组件给父组件传值（或者父组件访问子组件的数据）"><a href="#4-子组件给父组件传值（或者父组件访问子组件的数据）" class="headerlink" title="4:子组件给父组件传值（或者父组件访问子组件的数据）"></a>4:子组件给父组件传值（或者父组件访问子组件的数据）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">temp</span> @<span class="attr">func</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"myClick"</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#son'</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          sonmsg: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'小头儿子'</span>,</span></span><br><span class="line">            age: 6</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      methods: &#123;</span><br><span class="line">        myClick() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'func'</span>, <span class="keyword">this</span>.sonmsg.name);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        datamsgFromson: <span class="literal">null</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        show(data1) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.datamsgFromson = data1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">/* 当点击的时候，就会触发子组件身上的myClick方法，在myClick方法中，就会emit调用父组件中的方法，把data1传给了datamsgFromson，然后在父组件的data中，就会自动的把值更新上去 */</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-创建子组件&quot;&gt;&lt;a href=&quot;#1-创建子组件&quot; class=&quot;headerlink&quot; title=&quot;1:创建子组件&quot;&gt;&lt;/a&gt;1:创建子组件&lt;/h1&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>6父子组件通讯</title>
    <link href="http://yoursite.com/2020/03/06/6%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    <id>http://yoursite.com/2020/03/06/6%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/</id>
    <published>2020-03-06T07:45:57.000Z</published>
    <updated>2020-03-06T08:57:37.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a><a href="https://cn.vuejs.org/v2/guide/components.html#通过-Prop-向子组件传递数据" target="_blank" rel="noopener">通过 Prop 向子组件传递数据</a></h2><p>早些时候，我们提到了创建一个博文组件的事情。问题是如果你不能向这个组件传递某一篇博文的标题或内容之类的我们想展示的数据的话，它是没有办法使用的。这也正是 prop 的由来。</p><p>Prop 是你可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个属性。为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-for</span>=<span class="string">'post in posts'</span> <span class="attr">:key</span>=<span class="string">'post.key'</span> <span class="attr">:title</span>=<span class="string">'post.title'</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'temp'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'blog-post'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#temp'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'title'</span>]</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        posts: [&#123;</span><br><span class="line">            id: 1,</span><br><span class="line"><span class="actionscript">            title: <span class="string">"hello world"</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 2,</span><br><span class="line"><span class="actionscript">            title: <span class="string">"hello world2"</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: 3,</span><br><span class="line"><span class="actionscript">            title: <span class="string">"hello world3"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件通过 prop的方法可以访问父组件数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">temp</span> <span class="attr">v-bind:fathermsg1</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">temp</span>&gt;</span><span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是子组件--- &#123;&#123;fathermsg1&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> temp =&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#son'</span>,</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'fathermsg1'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            msg:<span class="string">'父组件的数据123'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;&#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">        temp</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;);  </span><br><span class="line">        </span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--1：通过 props  在子组件身上注册了一个 属性，该属性的属性名是 fathermsg1</span></span><br><span class="line"><span class="comment">         2： 通过 v-bind指令 将父组件的 值 绑定在刚刚注册的属性身上  v-bind:fathermsg1="msg"</span></span><br><span class="line"><span class="comment">         3：通过插值表达式  在子组件中就可以访问到父组件的数据了&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过-Prop-向子组件传递数据&quot;&gt;&lt;a href=&quot;#通过-Prop-向子组件传递数据&quot; class=&quot;headerlink&quot; title=&quot;通过 Prop 向子组件传递数据&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide
      
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>7prop</title>
    <link href="http://yoursite.com/2020/03/06/7prop/"/>
    <id>http://yoursite.com/2020/03/06/7prop/</id>
    <published>2020-03-06T07:45:57.000Z</published>
    <updated>2020-03-06T08:57:54.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prop-的大小写-camelCase-vs-kebab-case"><a href="#Prop-的大小写-camelCase-vs-kebab-case" class="headerlink" title="Prop 的大小写 (camelCase vs kebab-case)"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-的大小写-camelCase-vs-kebab-case" target="_blank" rel="noopener">Prop 的大小写 (camelCase vs kebab-case)</a></h2><p>HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;blog-post&#39;, &#123;</span><br><span class="line">  &#x2F;&#x2F; 在 JavaScript 中是 camelCase 的</span><br><span class="line">  props: [&#39;postTitle&#39;],</span><br><span class="line">  template: &#39;&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span><br><span class="line">&lt;blog-post post-title&#x3D;&quot;hello!&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><p>重申一次，如果你使用字符串模板，那么这个限制就不存在了。</p><h2 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-类型" target="_blank" rel="noopener">Prop 类型</a></h2><p>到这里，我们只看到了以字符串数组形式列出的 prop：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [&#39;title&#39;, &#39;likes&#39;, &#39;isPublished&#39;, &#39;commentIds&#39;, &#39;author&#39;]</span><br></pre></td></tr></table></figure><p>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number,</span><br><span class="line">  isPublished: Boolean,</span><br><span class="line">  commentIds: Array,</span><br><span class="line">  author: Object,</span><br><span class="line">  callback: Function,</span><br><span class="line">  contactsPromise: Promise &#x2F;&#x2F; or any other constructor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。你会在这个页面接下来的部分看到<a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-验证" target="_blank" rel="noopener">类型检查和其它 prop 验证</a>。</p><h2 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传递静态或动态-Prop" target="_blank" rel="noopener">传递静态或动态 Prop</a></h2><p>像这样，你已经知道了可以像这样给 prop 传入一个静态的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post title&#x3D;&quot;My journey with Vue&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><p>你也知道 prop 可以通过 <code>v-bind</code> 动态赋值，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 动态赋予一个变量的值 --&gt;</span><br><span class="line">&lt;blog-post v-bind:title&#x3D;&quot;post.title&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:title&#x3D;&quot;post.title + &#39; by &#39; + post.author.name&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><p>在上述两个示例中，我们传入的值都是字符串类型的，但实际上<em>任何</em>类型的值都可以传给一个 prop。</p><h3 id="传入一个数字"><a href="#传入一个数字" class="headerlink" title="传入一个数字"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传入一个数字" target="_blank" rel="noopener">传入一个数字</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即便 &#96;42&#96; 是静态的，我们仍然需要 &#96;v-bind&#96; 来告诉 Vue --&gt;</span><br><span class="line">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="line">&lt;blog-post v-bind:likes&#x3D;&quot;42&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="line">&lt;blog-post v-bind:likes&#x3D;&quot;post.likes&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="传入一个布尔值"><a href="#传入一个布尔值" class="headerlink" title="传入一个布尔值"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传入一个布尔值" target="_blank" rel="noopener">传入一个布尔值</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 &#96;true&#96;。--&gt;</span><br><span class="line">&lt;blog-post is-published&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 即便 &#96;false&#96; 是静态的，我们仍然需要 &#96;v-bind&#96; 来告诉 Vue --&gt;</span><br><span class="line">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="line">&lt;blog-post v-bind:is-published&#x3D;&quot;false&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="line">&lt;blog-post v-bind:is-published&#x3D;&quot;post.isPublished&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="传入一个数组"><a href="#传入一个数组" class="headerlink" title="传入一个数组"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传入一个数组" target="_blank" rel="noopener">传入一个数组</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即便数组是静态的，我们仍然需要 &#96;v-bind&#96; 来告诉 Vue --&gt;</span><br><span class="line">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="line">&lt;blog-post v-bind:comment-ids&#x3D;&quot;[234, 266, 273]&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="line">&lt;blog-post v-bind:comment-ids&#x3D;&quot;post.commentIds&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="传入一个对象"><a href="#传入一个对象" class="headerlink" title="传入一个对象"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传入一个对象" target="_blank" rel="noopener">传入一个对象</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 即便对象是静态的，我们仍然需要 &#96;v-bind&#96; 来告诉 Vue --&gt;</span><br><span class="line">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:author&#x3D;&quot;&#123;</span><br><span class="line">    name: &#39;Veronica&#39;,</span><br><span class="line">    company: &#39;Veridian Dynamics&#39;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用一个变量进行动态赋值。--&gt;</span><br><span class="line">&lt;blog-post v-bind:author&#x3D;&quot;post.author&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="传入一个对象的所有属性"><a href="#传入一个对象的所有属性" class="headerlink" title="传入一个对象的所有属性"></a><a href="https://cn.vuejs.org/v2/guide/components-props.html#传入一个对象的所有属性" target="_blank" rel="noopener">传入一个对象的所有属性</a></h3><p>如果你想要将一个对象的所有属性都作为 prop 传入，你可以使用不带参数的 <code>v-bind</code> (取代 <code>v-bind:prop-name</code>)。例如，对于一个给定的对象 <code>post</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post: &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: &#39;My Journey with Vue&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post v-bind&#x3D;&quot;post&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:id&#x3D;&quot;post.id&quot;</span><br><span class="line">  v-bind:title&#x3D;&quot;post.title&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Prop-的大小写-camelCase-vs-kebab-case&quot;&gt;&lt;a href=&quot;#Prop-的大小写-camelCase-vs-kebab-case&quot; class=&quot;headerlink&quot; title=&quot;Prop 的大小写 (camelCase vs ke
      
    
    </summary>
    
    
      <category term="vue基础" scheme="http://yoursite.com/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
